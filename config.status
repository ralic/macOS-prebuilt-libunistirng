#! /bin/sh
# Generated by configure.
# Run this file to recreate the current configuration.
# Compiler output produced by configure, useful for debugging
# configure, is in config.log if it exists.

debug=false
ac_cs_recheck=false
ac_cs_silent=false

SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in #(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH


# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error


# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit

# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -pR'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -pR'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -pR'
  fi
else
  as_ln_s='cp -pR'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null


# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} # as_fn_mkdir_p
if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi


# as_fn_executable_p FILE
# -----------------------
# Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} # as_fn_executable_p
as_test_x='test -x'
as_executable_p=as_fn_executable_p

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"


exec 6>&1
## ----------------------------------- ##
## Main body of $CONFIG_STATUS script. ##
## ----------------------------------- ##
# Save the log message, to keep $0 and so on meaningful, and to
# report actual input values of CONFIG_FILES etc. instead of their
# values after options handling.
ac_log="
This file was extended by $as_me, which was
generated by GNU Autoconf 2.69.  Invocation command line was

  CONFIG_FILES    = $CONFIG_FILES
  CONFIG_HEADERS  = $CONFIG_HEADERS
  CONFIG_LINKS    = $CONFIG_LINKS
  CONFIG_COMMANDS = $CONFIG_COMMANDS
  $ $0 $@

on `(hostname || uname -n) 2>/dev/null | sed 1q`
"

# Files that config.status was made for.
config_files=" Makefile doc/Makefile gnulib-local/Makefile lib/Makefile lib/exported.sh lib/unistring/version.h:lib/unistring/version.in.h lib/unistring/woe32dll.h:lib/unistring/woe32dll.in.h tests/Makefile"
config_headers=" config.h"
config_commands=" depfiles libtool"

ac_cs_usage="\
\`$as_me' instantiates files and other configuration actions
from templates according to the current configuration.  Unless the files
and actions are specified as TAGs, all are instantiated by default.

Usage: $0 [OPTION]... [TAG]...

  -h, --help       print this help, then exit
  -V, --version    print version number and configuration settings, then exit
      --config     print configuration, then exit
  -q, --quiet, --silent
                   do not print progress messages
  -d, --debug      don't remove temporary files
      --recheck    update $as_me by reconfiguring in the same conditions
      --file=FILE[:TEMPLATE]
                   instantiate the configuration file FILE
      --header=FILE[:TEMPLATE]
                   instantiate the configuration header FILE

Configuration files:
$config_files

Configuration headers:
$config_headers

Configuration commands:
$config_commands

Report bugs to the package provider."

ac_cs_config="'--enable-threads=posix' '--enable-shared' '--enable-relocatable' '--prefix=/usr/local/Cellar/libunistring/0.9.7/' 'CC=cc' 'CFLAGS=-Ofast -fomit-frame-pointer -ffast-math -fno-signed-zeros -m64 -m32 -mmmx -msse -flto -ffp-contract=fast -funroll-loops ' 'LDFLAGS=-L/usr/local/opt/valgrind/lib -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -L/usr/local/opt/openblas/lib -L/usr/local/opt/qt/lib -L/usr/local/opt/bison/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/gettext/lib -L/usr/local/opt/libxml2/lib -L/usr/local/opt/libpng/lib -L/usr/local/opt/zlib/lib -L/usr/local/opt/openssl@1.1/lib ' 'CPPFLAGS=-I/usr/local/opt/valgrind/include -I/usr/local/opt/llvm/include -I/usr/local/opt/openblas/include -I/usr/local/opt/qt/include -I/usr/local/opt/readline/include -I/usr/local/opt/gettext/include -I/usr/local/opt/libxml2/include -I/usr/local/opt/libpng/include -I/usr/local/opt/zlib/include -I/usr/local/opt/openssl@1.1/include ' 'CPP=cc -E'"
ac_cs_version="\
config.status
configured by ./configure, generated by GNU Autoconf 2.69,
  with options \"$ac_cs_config\"

Copyright (C) 2012 Free Software Foundation, Inc.
This config.status script is free software; the Free Software Foundation
gives unlimited permission to copy, distribute and modify it."

ac_pwd='/Users/dojo/Library/Caches/Homebrew/libunistring-0.9.7'
srcdir='.'
INSTALL='/usr/local/opt/coreutils/libexec/gnubin/install -c'
MKDIR_P='/usr/local/opt/coreutils/libexec/gnubin/mkdir -p'
AWK='gawk'
test -n "$AWK" || AWK=awk
# The default lists apply if the user does not specify any file.
ac_need_defaults=:
while test $# != 0
do
  case $1 in
  --*=?*)
    ac_option=`expr "X$1" : 'X\([^=]*\)='`
    ac_optarg=`expr "X$1" : 'X[^=]*=\(.*\)'`
    ac_shift=:
    ;;
  --*=)
    ac_option=`expr "X$1" : 'X\([^=]*\)='`
    ac_optarg=
    ac_shift=:
    ;;
  *)
    ac_option=$1
    ac_optarg=$2
    ac_shift=shift
    ;;
  esac

  case $ac_option in
  # Handling of the options.
  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
    ac_cs_recheck=: ;;
  --version | --versio | --versi | --vers | --ver | --ve | --v | -V )
    $as_echo "$ac_cs_version"; exit ;;
  --config | --confi | --conf | --con | --co | --c )
    $as_echo "$ac_cs_config"; exit ;;
  --debug | --debu | --deb | --de | --d | -d )
    debug=: ;;
  --file | --fil | --fi | --f )
    $ac_shift
    case $ac_optarg in
    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
    '') as_fn_error $? "missing file argument" ;;
    esac
    as_fn_append CONFIG_FILES " '$ac_optarg'"
    ac_need_defaults=false;;
  --header | --heade | --head | --hea )
    $ac_shift
    case $ac_optarg in
    *\'*) ac_optarg=`$as_echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"` ;;
    esac
    as_fn_append CONFIG_HEADERS " '$ac_optarg'"
    ac_need_defaults=false;;
  --he | --h)
    # Conflict between --help and --header
    as_fn_error $? "ambiguous option: \`$1'
Try \`$0 --help' for more information.";;
  --help | --hel | -h )
    $as_echo "$ac_cs_usage"; exit ;;
  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
  | -silent | --silent | --silen | --sile | --sil | --si | --s)
    ac_cs_silent=: ;;

  # This is an error.
  -*) as_fn_error $? "unrecognized option: \`$1'
Try \`$0 --help' for more information." ;;

  *) as_fn_append ac_config_targets " $1"
     ac_need_defaults=false ;;

  esac
  shift
done

ac_configure_extra_args=

if $ac_cs_silent; then
  exec 6>/dev/null
  ac_configure_extra_args="$ac_configure_extra_args --silent"
fi

if $ac_cs_recheck; then
  set X /bin/sh './configure'  '--enable-threads=posix' '--enable-shared' '--enable-relocatable' '--prefix=/usr/local/Cellar/libunistring/0.9.7/' 'CC=cc' 'CFLAGS=-Ofast -fomit-frame-pointer -ffast-math -fno-signed-zeros -m64 -m32 -mmmx -msse -flto -ffp-contract=fast -funroll-loops ' 'LDFLAGS=-L/usr/local/opt/valgrind/lib -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -L/usr/local/opt/openblas/lib -L/usr/local/opt/qt/lib -L/usr/local/opt/bison/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/gettext/lib -L/usr/local/opt/libxml2/lib -L/usr/local/opt/libpng/lib -L/usr/local/opt/zlib/lib -L/usr/local/opt/openssl@1.1/lib ' 'CPPFLAGS=-I/usr/local/opt/valgrind/include -I/usr/local/opt/llvm/include -I/usr/local/opt/openblas/include -I/usr/local/opt/qt/include -I/usr/local/opt/readline/include -I/usr/local/opt/gettext/include -I/usr/local/opt/libxml2/include -I/usr/local/opt/libpng/include -I/usr/local/opt/zlib/include -I/usr/local/opt/openssl@1.1/include ' 'CPP=cc -E' $ac_configure_extra_args --no-create --no-recursion
  shift
  $as_echo "running CONFIG_SHELL=/bin/sh $*" >&6
  CONFIG_SHELL='/bin/sh'
  export CONFIG_SHELL
  exec "$@"
fi

exec 5>>config.log
{
  echo
  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## Running $as_me. ##
_ASBOX
  $as_echo "$ac_log"
} >&5

#
# INIT-COMMANDS
#
AMDEP_TRUE="" ac_aux_dir="build-aux"


# The HP-UX ksh and POSIX shell print the target directory to stdout
# if CDPATH is set.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

sed_quote_subst='s/\(["`$\\]\)/\\\1/g'
double_quote_subst='s/\(["`\\]\)/\\\1/g'
delay_variable_subst='s/\\\\\\\\\\\$/\\\\\\$/g'
macro_version='2.4.2'
macro_revision='1.3337'
AS='as'
DLLTOOL='false'
OBJDUMP='objdump'
enable_shared='yes'
enable_static='yes'
pic_mode='default'
enable_fast_install='needless'
SHELL='/bin/sh'
ECHO='printf %s\n'
PATH_SEPARATOR=':'
host_alias=''
host='x86_64-apple-darwin17.0.0'
host_os='darwin17.0.0'
build_alias=''
build='x86_64-apple-darwin17.0.0'
build_os='darwin17.0.0'
SED='/usr/local/opt/gnu-sed/libexec/gnubin/sed'
Xsed='/usr/local/opt/gnu-sed/libexec/gnubin/sed -e 1s/^X//'
GREP='/usr/local/bin/grep'
EGREP='/usr/local/bin/grep -E'
FGREP='/usr/local/bin/grep -F'
LD='/Library/Developer/CommandLineTools/usr/bin/ld'
NM='/usr/bin/nm -B'
LN_S='ln -s'
max_cmd_len='196608'
ac_objext='o'
exeext=''
lt_unset='unset'
lt_SP2NL='tr \040 \012'
lt_NL2SP='tr \015\012 \040\040'
lt_cv_to_host_file_cmd='func_convert_file_noop'
lt_cv_to_tool_file_cmd='func_convert_file_noop'
reload_flag=' -r'
reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'
deplibs_check_method='pass_all'
file_magic_cmd='$MAGIC_CMD'
file_magic_glob=''
want_nocaseglob='no'
sharedlib_from_linklib_cmd='printf %s\n'
AR='ar'
AR_FLAGS='cru'
archiver_list_spec=''
STRIP='strip'
RANLIB='ranlib'
old_postinstall_cmds='chmod 644 $oldlib~$RANLIB $tool_oldlib'
old_postuninstall_cmds=''
old_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs~$RANLIB $tool_oldlib'
lock_old_archive_extraction='yes'
CC='cc'
CFLAGS='-Ofast -fomit-frame-pointer -ffast-math -fno-signed-zeros -m64 -m32 -mmmx -msse -flto -ffp-contract=fast -funroll-loops '
compiler=''
GCC='yes'
lt_cv_sys_global_symbol_pipe='sed -n -e '\''s/^.*[	 ]\([BCDEGRST][BCDEGRST]*\)[	 ][	 ]*_\([_A-Za-z][_A-Za-z0-9]*\)$/\1 _\2 \2/p'\'' | sed '\''/ __gnu_lto/d'\'''
lt_cv_sys_global_symbol_to_cdecl='sed -n -e '\''s/^T .* \(.*\)$/extern int \1();/p'\'' -e '\''s/^[BCDEGRST]* .* \(.*\)$/extern char \1;/p'\'''
lt_cv_sys_global_symbol_to_c_name_address='sed -n -e '\''s/^: \([^ ]*\)[ ]*$/  {\"\1\", (void *) 0},/p'\'' -e '\''s/^[BCDEGRST]* \([^ ]*\) \([^ ]*\)$/  {"\2", (void *) \&\2},/p'\'''
lt_cv_sys_global_symbol_to_c_name_address_lib_prefix='sed -n -e '\''s/^: \([^ ]*\)[ ]*$/  {\"\1\", (void *) 0},/p'\'' -e '\''s/^[BCDEGRST]* \([^ ]*\) \(lib[^ ]*\)$/  {"\2", (void *) \&\2},/p'\'' -e '\''s/^[BCDEGRST]* \([^ ]*\) \([^ ]*\)$/  {"lib\2", (void *) \&\2},/p'\'''
nm_file_list_spec=''
lt_sysroot=''
objdir='.libs'
MAGIC_CMD='file'
lt_prog_compiler_no_builtin_flag=' -fno-builtin -fno-rtti -fno-exceptions'
lt_prog_compiler_pic=' -fno-common -DPIC'
lt_prog_compiler_wl='-Wl,'
lt_prog_compiler_static=''
lt_cv_prog_compiler_c_o='yes'
need_locks='no'
MANIFEST_TOOL=':'
DSYMUTIL='dsymutil'
NMEDIT='nmedit'
LIPO='lipo'
OTOOL='otool'
OTOOL64=':'
libext='a'
shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'
extract_expsyms_cmds=''
archive_cmds_need_lc='no'
enable_shared_with_static_runtimes='no'
export_dynamic_flag_spec=''
whole_archive_flag_spec=''
compiler_needs_object='no'
old_archive_from_new_cmds=''
old_archive_from_expsyms_cmds=''
archive_cmds='$CC -dynamiclib $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring $single_module~$DSYMUTIL $lib || :'
archive_expsym_cmds='sed '\''s,^,_,'\'' < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC -dynamiclib $allow_undefined_flag -o $lib $libobjs $deplibs $compiler_flags -install_name $rpath/$soname $verstring $single_module ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym~$DSYMUTIL $lib || :'
module_cmds='$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs $compiler_flags~$DSYMUTIL $lib || :'
module_expsym_cmds='sed -e '\''s,^,_,'\'' < $export_symbols > $output_objdir/${libname}-symbols.expsym~$CC $allow_undefined_flag -o $lib -bundle $libobjs $deplibs $compiler_flags ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym~$DSYMUTIL $lib || :'
with_gnu_ld='no'
allow_undefined_flag=''
no_undefined_flag=''
hardcode_libdir_flag_spec=''
hardcode_libdir_separator=''
hardcode_direct='no'
hardcode_direct_absolute='no'
hardcode_minus_L='no'
hardcode_shlibpath_var='unsupported'
hardcode_automatic='yes'
inherit_rpath='no'
link_all_deplibs='yes'
always_export_symbols='no'
export_symbols_cmds='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\''s/.* //'\'' | sort | uniq > $export_symbols'
exclude_expsyms='_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*'
include_expsyms=''
prelink_cmds=''
postlink_cmds=''
file_list_spec=''
variables_saved_for_relink='PATH DYLD_LIBRARY_PATH  GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH'
need_lib_prefix='no'
need_version='no'
version_type='darwin'
runpath_var=''
shlibpath_var='DYLD_LIBRARY_PATH'
shlibpath_overrides_runpath='yes'
libname_spec='lib$name'
library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'
soname_spec='${libname}${release}${major}$shared_ext'
install_override_mode=''
postinstall_cmds=''
postuninstall_cmds=''
finish_cmds=''
finish_eval=''
hardcode_into_libs='no'
sys_lib_search_path_spec='/Library/Developer/CommandLineTools/usr/lib/clang/9.0.0  /usr/local/lib'
sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'
hardcode_action='immediate'
enable_dlopen='unknown'
enable_dlopen_self='unknown'
enable_dlopen_self_static='unknown'
old_striplib='strip -S'
striplib='strip -x'
LD_RC=''
reload_flag_RC=''
reload_cmds_RC=''
old_archive_cmds_RC=''
compiler_RC=''
GCC_RC=''
lt_prog_compiler_no_builtin_flag_RC=''
lt_prog_compiler_pic_RC=''
lt_prog_compiler_wl_RC=''
lt_prog_compiler_static_RC=''
lt_cv_prog_compiler_c_o_RC='yes'
archive_cmds_need_lc_RC=''
enable_shared_with_static_runtimes_RC=''
export_dynamic_flag_spec_RC=''
whole_archive_flag_spec_RC=''
compiler_needs_object_RC=''
old_archive_from_new_cmds_RC=''
old_archive_from_expsyms_cmds_RC=''
archive_cmds_RC=''
archive_expsym_cmds_RC=''
module_cmds_RC=''
module_expsym_cmds_RC=''
with_gnu_ld_RC=''
allow_undefined_flag_RC=''
no_undefined_flag_RC=''
hardcode_libdir_flag_spec_RC=''
hardcode_libdir_separator_RC=''
hardcode_direct_RC=''
hardcode_direct_absolute_RC=''
hardcode_minus_L_RC=''
hardcode_shlibpath_var_RC=''
hardcode_automatic_RC=''
inherit_rpath_RC=''
link_all_deplibs_RC=''
always_export_symbols_RC=''
export_symbols_cmds_RC=''
exclude_expsyms_RC=''
include_expsyms_RC=''
prelink_cmds_RC=''
postlink_cmds_RC=''
file_list_spec_RC=''
hardcode_action_RC=''

LTCC='cc'
LTCFLAGS='-Ofast -fomit-frame-pointer -ffast-math -fno-signed-zeros -m64 -m32 -mmmx -msse -flto -ffp-contract=fast -funroll-loops '
compiler='cc'

# A function that is used when there is no print builtin or printf.
func_fallback_echo ()
{
  eval 'cat <<_LTECHO_EOF
$1
_LTECHO_EOF'
}

# Quote evaled strings.
for var in AS DLLTOOL OBJDUMP SHELL ECHO PATH_SEPARATOR SED GREP EGREP FGREP LD NM LN_S lt_SP2NL lt_NL2SP reload_flag deplibs_check_method file_magic_cmd file_magic_glob want_nocaseglob sharedlib_from_linklib_cmd AR AR_FLAGS archiver_list_spec STRIP RANLIB CC CFLAGS compiler lt_cv_sys_global_symbol_pipe lt_cv_sys_global_symbol_to_cdecl lt_cv_sys_global_symbol_to_c_name_address lt_cv_sys_global_symbol_to_c_name_address_lib_prefix nm_file_list_spec lt_prog_compiler_no_builtin_flag lt_prog_compiler_pic lt_prog_compiler_wl lt_prog_compiler_static lt_cv_prog_compiler_c_o need_locks MANIFEST_TOOL DSYMUTIL NMEDIT LIPO OTOOL OTOOL64 shrext_cmds export_dynamic_flag_spec whole_archive_flag_spec compiler_needs_object with_gnu_ld allow_undefined_flag no_undefined_flag hardcode_libdir_flag_spec hardcode_libdir_separator exclude_expsyms include_expsyms file_list_spec variables_saved_for_relink libname_spec library_names_spec soname_spec install_override_mode finish_eval old_striplib striplib LD_RC reload_flag_RC compiler_RC lt_prog_compiler_no_builtin_flag_RC lt_prog_compiler_pic_RC lt_prog_compiler_wl_RC lt_prog_compiler_static_RC lt_cv_prog_compiler_c_o_RC export_dynamic_flag_spec_RC whole_archive_flag_spec_RC compiler_needs_object_RC with_gnu_ld_RC allow_undefined_flag_RC no_undefined_flag_RC hardcode_libdir_flag_spec_RC hardcode_libdir_separator_RC exclude_expsyms_RC include_expsyms_RC file_list_spec_RC; do
    case `eval \\$ECHO \\""\\$$var"\\"` in
    *[\\\`\"\$]*)
      eval "lt_$var=\\\"\`\$ECHO \"\$$var\" | \$SED \"\$sed_quote_subst\"\`\\\""
      ;;
    *)
      eval "lt_$var=\\\"\$$var\\\""
      ;;
    esac
done

# Double-quote double-evaled strings.
for var in reload_cmds old_postinstall_cmds old_postuninstall_cmds old_archive_cmds extract_expsyms_cmds old_archive_from_new_cmds old_archive_from_expsyms_cmds archive_cmds archive_expsym_cmds module_cmds module_expsym_cmds export_symbols_cmds prelink_cmds postlink_cmds postinstall_cmds postuninstall_cmds finish_cmds sys_lib_search_path_spec sys_lib_dlsearch_path_spec reload_cmds_RC old_archive_cmds_RC old_archive_from_new_cmds_RC old_archive_from_expsyms_cmds_RC archive_cmds_RC archive_expsym_cmds_RC module_cmds_RC module_expsym_cmds_RC export_symbols_cmds_RC prelink_cmds_RC postlink_cmds_RC; do
    case `eval \\$ECHO \\""\\$$var"\\"` in
    *[\\\`\"\$]*)
      eval "lt_$var=\\\"\`\$ECHO \"\$$var\" | \$SED -e \"\$double_quote_subst\" -e \"\$sed_quote_subst\" -e \"\$delay_variable_subst\"\`\\\""
      ;;
    *)
      eval "lt_$var=\\\"\$$var\\\""
      ;;
    esac
done

ac_aux_dir='build-aux'
xsi_shell='yes'
lt_shell_append='yes'

# See if we are running on zsh, and set the options which allow our
# commands through without removal of \ escapes INIT.
if test -n "${ZSH_VERSION+set}" ; then
   setopt NO_GLOB_SUBST
fi


    PACKAGE='libunistring'
    VERSION='0.9.7'
    TIMESTAMP=''
    RM='rm -f'
    ofile='libtool'







# Handling of arguments.
for ac_config_target in $ac_config_targets
do
  case $ac_config_target in
    "config.h") CONFIG_HEADERS="$CONFIG_HEADERS config.h" ;;
    "depfiles") CONFIG_COMMANDS="$CONFIG_COMMANDS depfiles" ;;
    "libtool") CONFIG_COMMANDS="$CONFIG_COMMANDS libtool" ;;
    "Makefile") CONFIG_FILES="$CONFIG_FILES Makefile" ;;
    "doc/Makefile") CONFIG_FILES="$CONFIG_FILES doc/Makefile" ;;
    "gnulib-local/Makefile") CONFIG_FILES="$CONFIG_FILES gnulib-local/Makefile" ;;
    "lib/Makefile") CONFIG_FILES="$CONFIG_FILES lib/Makefile" ;;
    "lib/exported.sh") CONFIG_FILES="$CONFIG_FILES lib/exported.sh" ;;
    "lib/unistring/version.h") CONFIG_FILES="$CONFIG_FILES lib/unistring/version.h:lib/unistring/version.in.h" ;;
    "lib/unistring/woe32dll.h") CONFIG_FILES="$CONFIG_FILES lib/unistring/woe32dll.h:lib/unistring/woe32dll.in.h" ;;
    "tests/Makefile") CONFIG_FILES="$CONFIG_FILES tests/Makefile" ;;

  *) as_fn_error $? "invalid argument: \`$ac_config_target'" "$LINENO" 5;;
  esac
done


# If the user did not use the arguments to specify the items to instantiate,
# then the envvar interface is used.  Set only those that are not.
# We use the long form for the default assignment because of an extremely
# bizarre bug on SunOS 4.1.3.
if $ac_need_defaults; then
  test "${CONFIG_FILES+set}" = set || CONFIG_FILES=$config_files
  test "${CONFIG_HEADERS+set}" = set || CONFIG_HEADERS=$config_headers
  test "${CONFIG_COMMANDS+set}" = set || CONFIG_COMMANDS=$config_commands
fi

# Have a temporary directory for convenience.  Make it in the build tree
# simply because there is no reason against having it here, and in addition,
# creating and moving files from /tmp can sometimes cause problems.
# Hook for its removal unless debugging.
# Note that there is a small window in which the directory will not be cleaned:
# after its creation but before its name has been assigned to `$tmp'.
$debug ||
{
  tmp= ac_tmp=
  trap 'exit_status=$?
  : "${ac_tmp:=$tmp}"
  { test ! -d "$ac_tmp" || rm -fr "$ac_tmp"; } && exit $exit_status
' 0
  trap 'as_fn_exit 1' 1 2 13 15
}
# Create a (secure) tmp directory for tmp files.

{
  tmp=`(umask 077 && mktemp -d "./confXXXXXX") 2>/dev/null` &&
  test -d "$tmp"
}  ||
{
  tmp=./conf$$-$RANDOM
  (umask 077 && mkdir "$tmp")
} || as_fn_error $? "cannot create a temporary directory in ." "$LINENO" 5
ac_tmp=$tmp

# Set up the scripts for CONFIG_FILES section.
# No need to generate them if there are no CONFIG_FILES.
# This happens for instance with `./config.status config.h'.
if test -n "$CONFIG_FILES"; then


ac_cr=`echo X | tr X '\015'`
# On cygwin, bash can eat \r inside `` if the user requested igncr.
# But we know of no other shell where ac_cr would be empty at this
# point, so we can use a bashism as a fallback.
if test "x$ac_cr" = x; then
  eval ac_cr=\$\'\\r\'
fi
ac_cs_awk_cr=`$AWK 'BEGIN { print "a\rb" }' </dev/null 2>/dev/null`
if test "$ac_cs_awk_cr" = "a${ac_cr}b"; then
  ac_cs_awk_cr='\\r'
else
  ac_cs_awk_cr=$ac_cr
fi

echo 'BEGIN {' >"$ac_tmp/subs1.awk" &&
cat >>"$ac_tmp/subs1.awk" <<\_ACAWK &&
S["gltests_LTLIBOBJS"]=" error.lo putenv.lo strerror.lo strerror-override.lo"
S["gltests_LIBOBJS"]=" error.o putenv.o strerror.o strerror-override.o"
S["gl_LTLIBOBJS"]=" fseterr.lo isnanf.lo isnanl.lo strstr.lo wcwidth.lo"
S["gl_LIBOBJS"]=" fseterr.o isnanf.o isnanl.o strstr.o wcwidth.o"
S["am__EXEEXT_FALSE"]=""
S["am__EXEEXT_TRUE"]="#"
S["LTLIBOBJS"]=""
S["LIBOBJS"]=""
S["PERL"]="/usr/local/bin/perl"
S["DVIPS"]="/Users/dojo/Library/Caches/Homebrew/libunistring-0.9.7/build-aux/missing dvips"
S["TEXI2DVI"]="/usr/bin/texi2dvi"
S["HEXVERSION"]="0x000907"
S["HAVE_GLOBAL_SYMBOL_PIPE"]="1"
S["GLOBAL_SYMBOL_PIPE"]="sed -n -e 's/^.*[	 ]\\([BCDEGRST][BCDEGRST]*\\)[	 ][	 ]*_\\([_A-Za-z][_A-Za-z0-9]*\\)$/\\1 _\\2 \\2/p' | sed '/ __gnu_lto/d'"
S["NAMESPACING"]="yes"
S["DLL_VARIABLE"]=""
S["WOE32DLL_FALSE"]=""
S["WOE32DLL_TRUE"]="#"
S["LIBTESTS_LIBDEPS"]=""
S["YIELD_LIB"]=""
S["LOCALE_AR"]="none"
S["HAVE_WINSOCK2_H"]="0"
S["NEXT_AS_FIRST_DIRECTIVE_STDIO_H"]="<stdio.h>"
S["NEXT_STDIO_H"]="<stdio.h>"
S["GL_GENERATE_STDALIGN_H_FALSE"]="#"
S["GL_GENERATE_STDALIGN_H_TRUE"]=""
S["STDALIGN_H"]="stdalign.h"
S["NEXT_AS_FIRST_DIRECTIVE_LOCALE_H"]="<locale.h>"
S["NEXT_LOCALE_H"]="<locale.h>"
S["HAVE_XLOCALE_H"]="1"
S["REPLACE_STRUCT_LCONV"]="0"
S["REPLACE_DUPLOCALE"]="0"
S["REPLACE_SETLOCALE"]="0"
S["REPLACE_LOCALECONV"]="0"
S["HAVE_DUPLOCALE"]="1"
S["GNULIB_DUPLOCALE"]="0"
S["GNULIB_SETLOCALE"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_LOCALECONV"]="0"
S["NEXT_AS_FIRST_DIRECTIVE_INTTYPES_H"]="<inttypes.h>"
S["NEXT_INTTYPES_H"]="<inttypes.h>"
S["UINT64_MAX_EQ_ULONG_MAX"]="0"
S["UINT32_MAX_LT_UINTMAX_MAX"]="1"
S["PRIPTR_PREFIX"]="\"l\""
S["PRI_MACROS_BROKEN"]="0"
S["INT64_MAX_EQ_LONG_MAX"]="0"
S["INT32_MAX_LT_INTMAX_MAX"]="1"
S["REPLACE_STRTOUMAX"]="0"
S["REPLACE_STRTOIMAX"]="0"
S["HAVE_DECL_STRTOUMAX"]="1"
S["HAVE_DECL_STRTOIMAX"]="1"
S["HAVE_DECL_IMAXDIV"]="1"
S["HAVE_DECL_IMAXABS"]="1"
S["GNULIB_STRTOUMAX"]="0"
S["GNULIB_STRTOIMAX"]="0"
S["GNULIB_IMAXDIV"]="0"
S["GNULIB_IMAXABS"]="0"
S["LTLIBINTL"]=""
S["LIBINTL"]=""
S["HAVE_MSVC_INVALID_PARAMETER_HANDLER"]="0"
S["REPLACE_VSPRINTF"]="0"
S["REPLACE_VSNPRINTF"]="0"
S["REPLACE_VPRINTF"]="0"
S["REPLACE_VFPRINTF"]="0"
S["REPLACE_VDPRINTF"]="0"
S["REPLACE_VASPRINTF"]="0"
S["REPLACE_TMPFILE"]="0"
S["REPLACE_STDIO_WRITE_FUNCS"]="0"
S["REPLACE_STDIO_READ_FUNCS"]="0"
S["REPLACE_SPRINTF"]="0"
S["REPLACE_SNPRINTF"]="0"
S["REPLACE_RENAMEAT"]="0"
S["REPLACE_RENAME"]="0"
S["REPLACE_REMOVE"]="0"
S["REPLACE_PRINTF"]="0"
S["REPLACE_POPEN"]="0"
S["REPLACE_PERROR"]="0"
S["REPLACE_OBSTACK_PRINTF"]="0"
S["REPLACE_GETLINE"]="0"
S["REPLACE_GETDELIM"]="0"
S["REPLACE_FTELLO"]="0"
S["REPLACE_FTELL"]="0"
S["REPLACE_FSEEKO"]="0"
S["REPLACE_FSEEK"]="0"
S["REPLACE_FREOPEN"]="0"
S["REPLACE_FPURGE"]="0"
S["REPLACE_FPRINTF"]="0"
S["REPLACE_FOPEN"]="0"
S["REPLACE_FFLUSH"]="0"
S["REPLACE_FDOPEN"]="0"
S["REPLACE_FCLOSE"]="0"
S["REPLACE_DPRINTF"]="0"
S["HAVE_VDPRINTF"]="1"
S["HAVE_VASPRINTF"]="1"
S["HAVE_RENAMEAT"]="1"
S["HAVE_POPEN"]="1"
S["HAVE_PCLOSE"]="1"
S["HAVE_FTELLO"]="1"
S["HAVE_FSEEKO"]="1"
S["HAVE_DPRINTF"]="1"
S["HAVE_DECL_VSNPRINTF"]="1"
S["HAVE_DECL_SNPRINTF"]="1"
S["HAVE_DECL_OBSTACK_PRINTF"]="1"
S["HAVE_DECL_GETLINE"]="1"
S["HAVE_DECL_GETDELIM"]="1"
S["HAVE_DECL_FTELLO"]="1"
S["HAVE_DECL_FSEEKO"]="1"
S["HAVE_DECL_FPURGE"]="1"
S["GNULIB_VSPRINTF_POSIX"]="0"
S["GNULIB_VSNPRINTF"]="0"
S["GNULIB_VPRINTF_POSIX"]="0"
S["GNULIB_VPRINTF"]="1"
S["GNULIB_VFPRINTF_POSIX"]="0"
S["GNULIB_VFPRINTF"]="1"
S["GNULIB_VDPRINTF"]="0"
S["GNULIB_VSCANF"]="0"
S["GNULIB_VFSCANF"]="0"
S["GNULIB_VASPRINTF"]="0"
S["GNULIB_TMPFILE"]="0"
S["GNULIB_STDIO_H_SIGPIPE"]="0"
S["GNULIB_STDIO_H_NONBLOCKING"]="0"
S["GNULIB_SPRINTF_POSIX"]="0"
S["GNULIB_SNPRINTF"]="0"
S["GNULIB_SCANF"]="1"
S["GNULIB_RENAMEAT"]="0"
S["GNULIB_RENAME"]="0"
S["GNULIB_REMOVE"]="0"
S["GNULIB_PUTS"]="1"
S["GNULIB_PUTCHAR"]="1"
S["GNULIB_PUTC"]="1"
S["GNULIB_PRINTF_POSIX"]="0"
S["GNULIB_PRINTF"]="1"
S["GNULIB_POPEN"]="0"
S["GNULIB_PERROR"]="0"
S["GNULIB_PCLOSE"]="0"
S["GNULIB_OBSTACK_PRINTF_POSIX"]="0"
S["GNULIB_OBSTACK_PRINTF"]="0"
S["GNULIB_GETLINE"]="0"
S["GNULIB_GETDELIM"]="0"
S["GNULIB_GETCHAR"]="1"
S["GNULIB_GETC"]="1"
S["GNULIB_FWRITE"]="1"
S["GNULIB_FTELLO"]="0"
S["GNULIB_FTELL"]="0"
S["GNULIB_FSEEKO"]="0"
S["GNULIB_FSEEK"]="0"
S["GNULIB_FSCANF"]="1"
S["GNULIB_FREOPEN"]="0"
S["GNULIB_FREAD"]="1"
S["GNULIB_FPUTS"]="1"
S["GNULIB_FPUTC"]="1"
S["GNULIB_FPURGE"]="0"
S["GNULIB_FPRINTF_POSIX"]="0"
S["GNULIB_FPRINTF"]="1"
S["GNULIB_FOPEN"]="0"
S["GNULIB_FGETS"]="1"
S["GNULIB_FGETC"]="1"
S["GNULIB_FFLUSH"]="0"
S["GNULIB_FDOPEN"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_FCLOSE"]="0"
S["GNULIB_DPRINTF"]="0"
S["NEXT_AS_FIRST_DIRECTIVE_CTYPE_H"]="<ctype.h>"
S["NEXT_CTYPE_H"]="<ctype.h>"
S["HAVE_ISBLANK"]="1"
S["GNULIB_ISBLANK"]="0"
S["LOCALE_TR_UTF8"]="none"
S["LOCALE_FR"]="fr_FR.ISO8859-1"
S["gltests_WITNESS"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["NEXT_AS_FIRST_DIRECTIVE_WCHAR_H"]="<wchar.h>"
S["NEXT_WCHAR_H"]="<wchar.h>"
S["LIBUNISTRING_COMPILE_UNIWIDTH_WIDTH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWIDTH_WIDTH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWIDTH_U8_WIDTH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWIDTH_U8_WIDTH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWIDTH_U8_STRWIDTH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWIDTH_U8_STRWIDTH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWIDTH_U32_WIDTH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWIDTH_U32_WIDTH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWIDTH_U32_STRWIDTH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWIDTH_U32_STRWIDTH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWIDTH_U16_WIDTH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWIDTH_U16_WIDTH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWIDTH_U16_STRWIDTH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWIDTH_U16_STRWIDTH_TRUE"]=""
S["LIBUNISTRING_UNIWIDTH_H"]="uniwidth.h"
S["LIBUNISTRING_COMPILE_UNIWBRK_WORDBREAK_PROPERTY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWBRK_WORDBREAK_PROPERTY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWBRK_ULC_WORDBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWBRK_ULC_WORDBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWBRK_U8_WORDBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWBRK_U8_WORDBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWBRK_U32_WORDBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWBRK_U32_WORDBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIWBRK_U16_WORDBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIWBRK_U16_WORDBREAKS_TRUE"]=""
S["LIBUNISTRING_UNIWBRK_H"]="uniwbrk.h"
S["LIBUNISTRING_UNITYPES_H"]="unitypes.h"
S["LIBUNISTRING_COMPILE_UNISTR_U8_UCTOMB_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_UCTOMB_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_TO_U32_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_TO_U32_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_TO_U16_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_TO_U16_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRTOK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRTOK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRSTR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRSTR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRSPN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRSPN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRRCHR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRRCHR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRPBRK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRPBRK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRNLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRNLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRNCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRNCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRNCMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRNCMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRNCAT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRNCAT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRMBTOUC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRMBTOUC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRMBLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRMBLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRDUP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRDUP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCSPN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCSPN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCHR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCHR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCAT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STRCAT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STPNCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STPNCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STPCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STPCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_STARTSWITH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_STARTSWITH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_SET_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_SET_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_PREV_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_PREV_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_NEXT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_NEXT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_MOVE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_MOVE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBTOUCR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBTOUCR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBTOUC_UNSAFE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBTOUC_UNSAFE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBTOUC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBTOUC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBSNLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBSNLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_MBLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_ENDSWITH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_ENDSWITH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_CPY_ALLOC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_CPY_ALLOC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_CPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_CPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_CMP2_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_CMP2_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_CMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_CMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_CHR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_CHR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U8_CHECK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U8_CHECK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_UCTOMB_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_UCTOMB_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_TO_U8_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_TO_U8_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_TO_U16_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_TO_U16_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRTOK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRTOK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRSTR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRSTR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRSPN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRSPN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRRCHR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRRCHR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRPBRK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRPBRK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRNLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRNLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRNCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRNCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRNCMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRNCMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRNCAT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRNCAT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRMBTOUC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRMBTOUC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRMBLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRMBLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRDUP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRDUP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCSPN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCSPN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCHR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCHR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCAT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STRCAT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STPNCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STPNCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STPCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STPCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_STARTSWITH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_STARTSWITH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_SET_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_SET_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_PREV_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_PREV_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_NEXT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_NEXT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_MOVE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_MOVE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBTOUCR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBTOUCR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBTOUC_UNSAFE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBTOUC_UNSAFE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBTOUC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBTOUC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBSNLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBSNLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_MBLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_ENDSWITH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_ENDSWITH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_CPY_ALLOC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_CPY_ALLOC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_CPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_CPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_CMP2_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_CMP2_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_CMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_CMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_CHR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_CHR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U32_CHECK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U32_CHECK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_UCTOMB_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_UCTOMB_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_TO_U8_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_TO_U8_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_TO_U32_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_TO_U32_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRTOK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRTOK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRSTR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRSTR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRSPN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRSPN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRRCHR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRRCHR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRPBRK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRPBRK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRNLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRNLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRNCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRNCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRNCMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRNCMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRNCAT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRNCAT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRMBTOUC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRMBTOUC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRMBLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRMBLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRDUP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRDUP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCSPN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCSPN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCHR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCHR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCAT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STRCAT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STPNCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STPNCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STPCPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STPCPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_STARTSWITH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_STARTSWITH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_SET_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_SET_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_PREV_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_PREV_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_NEXT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_NEXT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_MOVE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_MOVE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBTOUCR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBTOUCR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBTOUC_UNSAFE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBTOUC_UNSAFE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBTOUC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBTOUC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBSNLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBSNLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBLEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_MBLEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_ENDSWITH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_ENDSWITH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_CPY_ALLOC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_CPY_ALLOC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_CPY_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_CPY_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_CMP2_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_CMP2_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_CMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_CMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_CHR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_CHR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTR_U16_CHECK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTR_U16_CHECK_TRUE"]=""
S["LIBUNISTRING_UNISTR_H"]="unistr.h"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VSPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VSPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VSNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VSNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VFPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VFPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_VASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_SPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_SPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_SNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_SNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_FPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_FPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_ASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_ASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_ASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_ULC_ASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_VSPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_VSPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_VSNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_VSNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_VASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_VASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_VASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_VASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_VSPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_VSPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_VSNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_VSNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_VASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_VASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_VASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_VASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_SPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_SPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_SNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_SNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_ASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_ASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_ASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_U8_ASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_SPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_SPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_SNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_SNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_ASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_ASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_ASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U8_ASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_VSPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_VSPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_VSNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_VSNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_VASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_VASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_VASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_VASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_VSPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_VSPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_VSNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_VSNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_VASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_VASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_VASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_VASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_SPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_SPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_SNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_SNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_ASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_ASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_ASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_U32_ASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_SPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_SPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_SNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_SNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_ASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_ASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_ASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U32_ASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_VSPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_VSPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_VSNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_VSNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_VASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_VASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_VASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_VASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_VSPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_VSPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_VSNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_VSNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_VASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_VASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_VASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_VASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_SPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_SPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_SNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_SNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_ASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_ASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_ASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_U16_ASNPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_SPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_SPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_SNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_SNPRINTF_TRUE"]=""
S["HAVE_FEATURES_H"]="0"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_ASPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_ASPRINTF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_ASNPRINTF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNISTDIO_U16_ASNPRINTF_TRUE"]=""
S["LIBUNISTRING_UNISTDIO_H"]="unistdio.h"
S["HAVE_UNISTD_H"]="1"
S["NEXT_AS_FIRST_DIRECTIVE_UNISTD_H"]="<unistd.h>"
S["NEXT_UNISTD_H"]="<unistd.h>"
S["UNISTD_H_HAVE_WINSOCK2_H_AND_USE_SOCKETS"]="0"
S["UNISTD_H_HAVE_WINSOCK2_H"]="0"
S["REPLACE_WRITE"]="0"
S["REPLACE_USLEEP"]="0"
S["REPLACE_UNLINKAT"]="0"
S["REPLACE_UNLINK"]="0"
S["REPLACE_TTYNAME_R"]="0"
S["REPLACE_SYMLINKAT"]="0"
S["REPLACE_SYMLINK"]="0"
S["REPLACE_SLEEP"]="0"
S["REPLACE_RMDIR"]="0"
S["REPLACE_READLINKAT"]="0"
S["REPLACE_READLINK"]="0"
S["REPLACE_READ"]="0"
S["REPLACE_PWRITE"]="0"
S["REPLACE_PREAD"]="0"
S["REPLACE_LSEEK"]="0"
S["REPLACE_LINKAT"]="0"
S["REPLACE_LINK"]="0"
S["REPLACE_LCHOWN"]="0"
S["REPLACE_ISATTY"]="0"
S["REPLACE_GETPAGESIZE"]="0"
S["REPLACE_GETGROUPS"]="0"
S["REPLACE_GETLOGIN_R"]="0"
S["REPLACE_GETDTABLESIZE"]="0"
S["REPLACE_GETDOMAINNAME"]="0"
S["REPLACE_GETCWD"]="0"
S["REPLACE_FTRUNCATE"]="0"
S["REPLACE_FCHOWNAT"]="0"
S["REPLACE_DUP2"]="0"
S["REPLACE_DUP"]="0"
S["REPLACE_CLOSE"]="0"
S["REPLACE_CHOWN"]="0"
S["HAVE_SYS_PARAM_H"]="0"
S["HAVE_OS_H"]="0"
S["HAVE_DECL_TTYNAME_R"]="1"
S["HAVE_DECL_SETHOSTNAME"]="1"
S["HAVE_DECL_GETUSERSHELL"]="1"
S["HAVE_DECL_GETPAGESIZE"]="1"
S["HAVE_DECL_GETLOGIN_R"]="1"
S["HAVE_DECL_GETDOMAINNAME"]="1"
S["HAVE_DECL_FDATASYNC"]="1"
S["HAVE_DECL_FCHDIR"]="1"
S["HAVE_DECL_ENVIRON"]="0"
S["HAVE_USLEEP"]="1"
S["HAVE_UNLINKAT"]="1"
S["HAVE_SYMLINKAT"]="1"
S["HAVE_SYMLINK"]="1"
S["HAVE_SLEEP"]="1"
S["HAVE_SETHOSTNAME"]="1"
S["HAVE_READLINKAT"]="1"
S["HAVE_READLINK"]="1"
S["HAVE_PWRITE"]="1"
S["HAVE_PREAD"]="1"
S["HAVE_PIPE2"]="1"
S["HAVE_PIPE"]="1"
S["HAVE_LINKAT"]="1"
S["HAVE_LINK"]="1"
S["HAVE_LCHOWN"]="1"
S["HAVE_GROUP_MEMBER"]="1"
S["HAVE_GETPAGESIZE"]="1"
S["HAVE_GETLOGIN"]="1"
S["HAVE_GETHOSTNAME"]="1"
S["HAVE_GETGROUPS"]="1"
S["HAVE_GETDTABLESIZE"]="1"
S["HAVE_FTRUNCATE"]="1"
S["HAVE_FSYNC"]="1"
S["HAVE_FDATASYNC"]="1"
S["HAVE_FCHOWNAT"]="1"
S["HAVE_FCHDIR"]="1"
S["HAVE_FACCESSAT"]="1"
S["HAVE_EUIDACCESS"]="1"
S["HAVE_DUP3"]="1"
S["HAVE_DUP2"]="1"
S["HAVE_CHOWN"]="1"
S["GNULIB_WRITE"]="0"
S["GNULIB_USLEEP"]="0"
S["GNULIB_UNLINKAT"]="0"
S["GNULIB_UNLINK"]="0"
S["GNULIB_UNISTD_H_SIGPIPE"]="0"
S["GNULIB_UNISTD_H_NONBLOCKING"]="0"
S["GNULIB_TTYNAME_R"]="0"
S["GNULIB_SYMLINKAT"]="0"
S["GNULIB_SYMLINK"]="0"
S["GNULIB_SLEEP"]="0"
S["GNULIB_SETHOSTNAME"]="0"
S["GNULIB_RMDIR"]="0"
S["GNULIB_READLINKAT"]="0"
S["GNULIB_READLINK"]="0"
S["GNULIB_READ"]="0"
S["GNULIB_PWRITE"]="0"
S["GNULIB_PREAD"]="0"
S["GNULIB_PIPE2"]="0"
S["GNULIB_PIPE"]="0"
S["GNULIB_LSEEK"]="0"
S["GNULIB_LINKAT"]="0"
S["GNULIB_LINK"]="0"
S["GNULIB_LCHOWN"]="0"
S["GNULIB_ISATTY"]="0"
S["GNULIB_GROUP_MEMBER"]="0"
S["GNULIB_GETUSERSHELL"]="0"
S["GNULIB_GETPAGESIZE"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_GETLOGIN_R"]="0"
S["GNULIB_GETLOGIN"]="0"
S["GNULIB_GETHOSTNAME"]="0"
S["GNULIB_GETGROUPS"]="0"
S["GNULIB_GETDTABLESIZE"]="0"
S["GNULIB_GETDOMAINNAME"]="0"
S["GNULIB_GETCWD"]="0"
S["GNULIB_FTRUNCATE"]="0"
S["GNULIB_FSYNC"]="0"
S["GNULIB_FDATASYNC"]="0"
S["GNULIB_FCHOWNAT"]="0"
S["GNULIB_FCHDIR"]="0"
S["GNULIB_FACCESSAT"]="0"
S["GNULIB_EUIDACCESS"]="0"
S["GNULIB_ENVIRON"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_DUP3"]="0"
S["GNULIB_DUP2"]="0"
S["GNULIB_DUP"]="0"
S["GNULIB_CLOSE"]="0"
S["GNULIB_CHOWN"]="0"
S["GNULIB_CHDIR"]="0"
S["LIBUNISTRING_COMPILE_UNINORM_U8_NORMXFRM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U8_NORMXFRM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U8_NORMCOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U8_NORMCOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U8_NORMCMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U8_NORMCMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U8_NORMALIZE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U8_NORMALIZE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U32_NORMXFRM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U32_NORMXFRM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U32_NORMCOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U32_NORMCOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U32_NORMCMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U32_NORMCMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U32_NORMALIZE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U32_NORMALIZE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U16_NORMXFRM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U16_NORMXFRM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U16_NORMCOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U16_NORMCOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U16_NORMCMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U16_NORMCMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_U16_NORMALIZE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_U16_NORMALIZE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_NFKD_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_NFKD_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_NFKC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_NFKC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_NFD_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_NFD_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_NFC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_NFC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_FILTER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_FILTER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_DECOMPOSITION_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_DECOMPOSITION_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_DECOMPOSING_FORM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_DECOMPOSING_FORM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_COMPOSITION_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_COMPOSITION_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNINORM_CANONICAL_DECOMPOSITION_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINORM_CANONICAL_DECOMPOSITION_TRUE"]=""
S["LIBUNISTRING_UNINORM_H"]="uninorm.h"
S["LIBUNISTRING_COMPILE_UNINAME_UNINAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNINAME_UNINAME_TRUE"]=""
S["LIBUNISTRING_UNINAME_H"]="uniname.h"
S["LIBUNISTRING_COMPILE_UNILBRK_ULC_WIDTH_LINEBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNILBRK_ULC_WIDTH_LINEBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNILBRK_ULC_POSSIBLE_LINEBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNILBRK_ULC_POSSIBLE_LINEBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNILBRK_U8_WIDTH_LINEBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNILBRK_U8_WIDTH_LINEBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNILBRK_U8_POSSIBLE_LINEBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNILBRK_U8_POSSIBLE_LINEBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNILBRK_U32_WIDTH_LINEBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNILBRK_U32_WIDTH_LINEBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNILBRK_U32_POSSIBLE_LINEBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNILBRK_U32_POSSIBLE_LINEBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNILBRK_U16_WIDTH_LINEBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNILBRK_U16_WIDTH_LINEBREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNILBRK_U16_POSSIBLE_LINEBREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNILBRK_U16_POSSIBLE_LINEBREAKS_TRUE"]=""
S["LIBUNISTRING_UNILBRK_H"]="unilbrk.h"
S["LIBUNISTRING_COMPILE_UNIGBRK_ULC_GRAPHEME_BREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_ULC_GRAPHEME_BREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_UC_IS_GRAPHEME_BREAK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_UC_IS_GRAPHEME_BREAK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_UC_GBRK_PROP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_UC_GBRK_PROP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_U8_GRAPHEME_PREV_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_U8_GRAPHEME_PREV_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_U8_GRAPHEME_NEXT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_U8_GRAPHEME_NEXT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_U8_GRAPHEME_BREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_U8_GRAPHEME_BREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_U32_GRAPHEME_PREV_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_U32_GRAPHEME_PREV_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_U32_GRAPHEME_NEXT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_U32_GRAPHEME_NEXT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_U32_GRAPHEME_BREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_U32_GRAPHEME_BREAKS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_U16_GRAPHEME_PREV_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_U16_GRAPHEME_PREV_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_U16_GRAPHEME_NEXT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_U16_GRAPHEME_NEXT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNIGBRK_U16_GRAPHEME_BREAKS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNIGBRK_U16_GRAPHEME_BREAKS_TRUE"]=""
S["LIBUNISTRING_UNIGBRK_H"]="unigbrk.h"
S["LIBUNISTRING_COMPILE_UNICTYPE_SYNTAX_JAVA_WHITESPACE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_SYNTAX_JAVA_WHITESPACE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_SYNTAX_JAVA_IDENT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_SYNTAX_JAVA_IDENT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_SYNTAX_C_WHITESPACE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_SYNTAX_C_WHITESPACE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_SYNTAX_C_IDENT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_SYNTAX_C_IDENT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_SCRIPTS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_SCRIPTS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ZERO_WIDTH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ZERO_WIDTH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_XID_START_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_XID_START_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_XID_CONTINUE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_XID_CONTINUE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_WHITE_SPACE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_WHITE_SPACE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_VARIATION_SELECTOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_VARIATION_SELECTOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_UPPERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_UPPERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_UNIFIED_IDEOGRAPH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_UNIFIED_IDEOGRAPH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_UNASSIGNED_CODE_VALUE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_UNASSIGNED_CODE_VALUE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_TITLECASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_TITLECASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_TEST_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_TEST_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_TERMINAL_PUNCTUATION_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_TERMINAL_PUNCTUATION_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_SPACE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_SPACE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_SOFT_DOTTED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_SOFT_DOTTED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_SENTENCE_TERMINAL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_SENTENCE_TERMINAL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_RADICAL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_RADICAL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_QUOTATION_MARK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_QUOTATION_MARK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PUNCTUATION_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PUNCTUATION_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PRIVATE_USE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PRIVATE_USE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PATTERN_WHITE_SPACE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PATTERN_WHITE_SPACE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PATTERN_SYNTAX_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PATTERN_SYNTAX_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PARAGRAPH_SEPARATOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PARAGRAPH_SEPARATOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PAIRED_PUNCTUATION_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_PAIRED_PUNCTUATION_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_UPPERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_UPPERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_MATH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_MATH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_LOWERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_LOWERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_ID_START_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_ID_START_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_ID_CONTINUE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_ID_CONTINUE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_GRAPHEME_EXTEND_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_GRAPHEME_EXTEND_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_DEFAULT_IGNORABLE_CODE_POINT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_DEFAULT_IGNORABLE_CODE_POINT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_ALPHABETIC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_OTHER_ALPHABETIC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_NUMERIC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_NUMERIC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_NOT_A_CHARACTER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_NOT_A_CHARACTER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_NON_BREAK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_NON_BREAK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_MATH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_MATH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_LOWERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_LOWERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_LOGICAL_ORDER_EXCEPTION_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_LOGICAL_ORDER_EXCEPTION_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_LINE_SEPARATOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_LINE_SEPARATOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_LEFT_OF_PAIR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_LEFT_OF_PAIR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_JOIN_CONTROL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_JOIN_CONTROL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ISO_CONTROL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ISO_CONTROL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_IGNORABLE_CONTROL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_IGNORABLE_CONTROL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_IDS_TRINARY_OPERATOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_IDS_TRINARY_OPERATOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_IDS_BINARY_OPERATOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_IDS_BINARY_OPERATOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_IDEOGRAPHIC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_IDEOGRAPHIC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ID_START_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ID_START_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ID_CONTINUE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ID_CONTINUE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_HYPHEN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_HYPHEN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_HEX_DIGIT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_HEX_DIGIT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_GRAPHEME_LINK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_GRAPHEME_LINK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_GRAPHEME_EXTEND_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_GRAPHEME_EXTEND_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_GRAPHEME_BASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_GRAPHEME_BASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_FORMAT_CONTROL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_FORMAT_CONTROL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_EXTENDER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_EXTENDER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DIACRITIC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DIACRITIC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DEPRECATED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DEPRECATED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DEFAULT_IGNORABLE_CODE_POINT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DEFAULT_IGNORABLE_CODE_POINT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DECIMAL_DIGIT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DECIMAL_DIGIT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DASH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_DASH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CURRENCY_SYMBOL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CURRENCY_SYMBOL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_COMPOSITE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_COMPOSITE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_COMBINING_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_COMBINING_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_UPPERCASED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_UPPERCASED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_TITLECASED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_TITLECASED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_LOWERCASED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_LOWERCASED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_CASEMAPPED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_CASEMAPPED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_CASEFOLDED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CHANGES_WHEN_CASEFOLDED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CASED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CASED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CASE_IGNORABLE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_CASE_IGNORABLE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BYNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BYNAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_WHITESPACE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_WHITESPACE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_SEGMENT_SEPARATOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_SEGMENT_SEPARATOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_PDF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_PDF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_OTHER_NEUTRAL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_OTHER_NEUTRAL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_NON_SPACING_MARK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_NON_SPACING_MARK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_LEFT_TO_RIGHT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_LEFT_TO_RIGHT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_HEBREW_RIGHT_TO_LEFT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_HEBREW_RIGHT_TO_LEFT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_EUROPEAN_DIGIT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_EUROPEAN_DIGIT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_EUR_NUM_TERMINATOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_EUR_NUM_TERMINATOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_EUR_NUM_SEPARATOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_EUR_NUM_SEPARATOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_EMBEDDING_OR_OVERRIDE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_EMBEDDING_OR_OVERRIDE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_CONTROL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_CONTROL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_COMMON_SEPARATOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_COMMON_SEPARATOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_BOUNDARY_NEUTRAL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_BOUNDARY_NEUTRAL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_BLOCK_SEPARATOR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_BLOCK_SEPARATOR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_ARABIC_RIGHT_TO_LEFT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_ARABIC_RIGHT_TO_LEFT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_ARABIC_DIGIT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_BIDI_ARABIC_DIGIT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ASCII_HEX_DIGIT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ASCII_HEX_DIGIT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ALPHABETIC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_PROPERTY_ALPHABETIC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_NUMERIC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_NUMERIC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_MIRROR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_MIRROR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGTYPE_OF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGTYPE_OF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGTYPE_NAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGTYPE_NAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGTYPE_LONGNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGTYPE_LONGNAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGTYPE_BYNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGTYPE_BYNAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGGROUP_OF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGGROUP_OF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGGROUP_NAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGGROUP_NAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGGROUP_BYNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_JOININGGROUP_BYNAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_DIGIT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_DIGIT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_DECIMAL_DIGIT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_DECIMAL_DIGIT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_XDIGIT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_XDIGIT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_UPPER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_UPPER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_SPACE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_SPACE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_PUNCT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_PUNCT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_PRINT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_PRINT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_LOWER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_LOWER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_GRAPH_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_GRAPH_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_DIGIT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_DIGIT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_CNTRL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_CNTRL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_BLANK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_BLANK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_ALPHA_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_ALPHA_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_ALNUM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CTYPE_ALNUM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_COMBINING_CLASS_NAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_COMBINING_CLASS_NAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_COMBINING_CLASS_LONGNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_COMBINING_CLASS_LONGNAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_COMBINING_CLASS_BYNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_COMBINING_CLASS_BYNAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_COMBINING_CLASS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_COMBINING_CLASS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_TEST_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_TEST_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_OR_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_OR_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_OF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_OF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_NONE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_NONE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_NAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_NAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LONGNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LONGNAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_BYNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_BYNAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_AND_NOT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_AND_NOT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_AND_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_AND_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ZS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ZS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ZP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ZP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ZL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ZL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_Z_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_Z_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_SO_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_SO_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_SM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_SM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_SK_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_SK_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_SC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_SC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_S_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_S_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PO_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PO_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PI_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PI_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PD_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PD_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_PC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_P_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_P_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_NO_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_NO_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_NL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_NL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ND_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ND_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_N_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_N_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_MN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_MN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_ME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_MC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_MC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_M_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_M_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LU_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LU_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LO_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LO_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_LC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_L_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_L_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CS_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CS_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CO_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CO_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CN_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CN_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_CC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_C_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_CATEGORY_C_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_BLOCK_TEST_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_BLOCK_TEST_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_BLOCK_LIST_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_BLOCK_LIST_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_TEST_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_TEST_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_OF_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_OF_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_NAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_NAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_LONGNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_LONGNAME_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_BYNAME_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICTYPE_BIDICLASS_BYNAME_TRUE"]=""
S["LIBUNISTRING_UNICTYPE_H"]="unictype.h"
S["LIBUNISTRING_COMPILE_UNICONV_U8_STRCONV_TO_LOCALE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U8_STRCONV_TO_LOCALE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U8_STRCONV_TO_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U8_STRCONV_TO_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U8_STRCONV_FROM_LOCALE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U8_STRCONV_FROM_LOCALE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U8_STRCONV_FROM_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U8_STRCONV_FROM_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U8_CONV_TO_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U8_CONV_TO_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U8_CONV_FROM_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U8_CONV_FROM_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U32_STRCONV_TO_LOCALE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U32_STRCONV_TO_LOCALE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U32_STRCONV_TO_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U32_STRCONV_TO_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U32_STRCONV_FROM_LOCALE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U32_STRCONV_FROM_LOCALE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U32_STRCONV_FROM_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U32_STRCONV_FROM_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U32_CONV_TO_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U32_CONV_TO_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U32_CONV_FROM_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U32_CONV_FROM_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U16_STRCONV_TO_LOCALE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U16_STRCONV_TO_LOCALE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U16_STRCONV_TO_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U16_STRCONV_TO_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U16_STRCONV_FROM_LOCALE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U16_STRCONV_FROM_LOCALE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U16_STRCONV_FROM_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U16_STRCONV_FROM_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U16_CONV_TO_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U16_CONV_TO_ENC_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICONV_U16_CONV_FROM_ENC_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICONV_U16_CONV_FROM_ENC_TRUE"]=""
S["LIBUNISTRING_UNICONV_H"]="uniconv.h"
S["LIBUNISTRING_COMPILE_UNICASE_ULC_CASEXFRM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_ULC_CASEXFRM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_ULC_CASECOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_ULC_CASECOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_ULC_CASECMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_ULC_CASECMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_TOUPPER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_TOUPPER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_TOTITLE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_TOTITLE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_TOLOWER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_TOLOWER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_UPPERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_UPPERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_TITLECASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_TITLECASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_LOWERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_LOWERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_CASEFOLDED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_CASEFOLDED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_CASED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_IS_CASED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_CT_TOUPPER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_CT_TOUPPER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_CT_TOTITLE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_CT_TOTITLE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_CT_TOLOWER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_CT_TOLOWER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_CT_CASEFOLD_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_CT_CASEFOLD_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_CASEXFRM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_CASEXFRM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_CASEFOLD_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_CASEFOLD_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_CASECOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_CASECOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U8_CASECMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U8_CASECMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_TOUPPER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_TOUPPER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_TOTITLE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_TOTITLE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_TOLOWER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_TOLOWER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_UPPERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_UPPERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_TITLECASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_TITLECASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_LOWERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_LOWERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_CASEFOLDED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_CASEFOLDED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_CASED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_IS_CASED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_CT_TOUPPER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_CT_TOUPPER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_CT_TOTITLE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_CT_TOTITLE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_CT_TOLOWER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_CT_TOLOWER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_CT_CASEFOLD_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_CT_CASEFOLD_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_CASEXFRM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_CASEXFRM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_CASEFOLD_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_CASEFOLD_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_CASECOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_CASECOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U32_CASECMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U32_CASECMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_TOUPPER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_TOUPPER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_TOTITLE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_TOTITLE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_TOLOWER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_TOLOWER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_UPPERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_UPPERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_TITLECASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_TITLECASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_LOWERCASE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_LOWERCASE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_CASEFOLDED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_CASEFOLDED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_CASED_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_IS_CASED_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_CT_TOUPPER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_CT_TOUPPER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_CT_TOTITLE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_CT_TOTITLE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_CT_TOLOWER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_CT_TOLOWER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_CT_CASEFOLD_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_CT_CASEFOLD_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_CASEXFRM_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_CASEXFRM_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_CASEFOLD_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_CASEFOLD_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_CASECOLL_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_CASECOLL_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_U16_CASECMP_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_U16_CASECMP_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_TOUPPER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_TOUPPER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_TOTITLE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_TOTITLE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_TOLOWER_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_TOLOWER_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_LOCALE_LANGUAGE_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_LOCALE_LANGUAGE_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_EMPTY_SUFFIX_CONTEXT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_EMPTY_SUFFIX_CONTEXT_TRUE"]=""
S["LIBUNISTRING_COMPILE_UNICASE_EMPTY_PREFIX_CONTEXT_FALSE"]="#"
S["LIBUNISTRING_COMPILE_UNICASE_EMPTY_PREFIX_CONTEXT_TRUE"]=""
S["LIBUNISTRING_UNICASE_H"]="unicase.h"
S["WINDOWS_64_BIT_OFF_T"]="0"
S["NEXT_AS_FIRST_DIRECTIVE_SYS_TYPES_H"]="<sys/types.h>"
S["NEXT_SYS_TYPES_H"]="<sys/types.h>"
S["NEXT_AS_FIRST_DIRECTIVE_STRING_H"]="<string.h>"
S["NEXT_STRING_H"]="<string.h>"
S["NEXT_AS_FIRST_DIRECTIVE_STDLIB_H"]="<stdlib.h>"
S["NEXT_STDLIB_H"]="<stdlib.h>"
S["GL_GENERATE_STDINT_H_FALSE"]="#"
S["GL_GENERATE_STDINT_H_TRUE"]=""
S["STDINT_H"]="stdint.h"
S["HAVE_SYS_INTTYPES_H"]="0"
S["HAVE_SYS_BITYPES_H"]="0"
S["HAVE_C99_STDINT_H"]="0"
S["WINT_T_SUFFIX"]=""
S["WCHAR_T_SUFFIX"]=""
S["SIG_ATOMIC_T_SUFFIX"]=""
S["SIZE_T_SUFFIX"]="ul"
S["PTRDIFF_T_SUFFIX"]=""
S["HAVE_SIGNED_WINT_T"]="1"
S["HAVE_SIGNED_WCHAR_T"]="1"
S["HAVE_SIGNED_SIG_ATOMIC_T"]="1"
S["BITSIZEOF_WINT_T"]="32"
S["BITSIZEOF_WCHAR_T"]="32"
S["BITSIZEOF_SIG_ATOMIC_T"]="32"
S["BITSIZEOF_SIZE_T"]="32"
S["BITSIZEOF_PTRDIFF_T"]="32"
S["HAVE_STDINT_H"]="1"
S["NEXT_AS_FIRST_DIRECTIVE_STDINT_H"]="<stdint.h>"
S["NEXT_STDINT_H"]="<stdint.h>"
S["HAVE_SYS_TYPES_H"]="1"
S["HAVE_INTTYPES_H"]="1"
S["HAVE_WCHAR_H"]="1"
S["HAVE_UNSIGNED_LONG_LONG_INT"]="1"
S["HAVE_LONG_LONG_INT"]="1"
S["NEXT_AS_FIRST_DIRECTIVE_STDDEF_H"]=""
S["NEXT_STDDEF_H"]=""
S["GL_GENERATE_STDDEF_H_FALSE"]=""
S["GL_GENERATE_STDDEF_H_TRUE"]="#"
S["STDDEF_H"]=""
S["HAVE_WCHAR_T"]="1"
S["HAVE_MAX_ALIGN_T"]="1"
S["REPLACE_NULL"]="0"
S["HAVE__BOOL"]="1"
S["GL_GENERATE_STDBOOL_H_FALSE"]=""
S["GL_GENERATE_STDBOOL_H_TRUE"]="#"
S["STDBOOL_H"]=""
S["RELOCATABLE"]="yes"
S["APPLE_UNIVERSAL_BUILD"]="0"
S["UNDEFINE_STRTOK_R"]="0"
S["REPLACE_STRTOK_R"]="0"
S["REPLACE_STRSIGNAL"]="0"
S["REPLACE_STRNLEN"]="0"
S["REPLACE_STRNDUP"]="0"
S["REPLACE_STRNCAT"]="0"
S["REPLACE_STRERROR_R"]="0"
S["REPLACE_STRERROR"]="1"
S["REPLACE_STRCHRNUL"]="0"
S["REPLACE_STRCASESTR"]="0"
S["REPLACE_STRSTR"]="1"
S["REPLACE_STRDUP"]="0"
S["REPLACE_STPNCPY"]="0"
S["REPLACE_MEMMEM"]="0"
S["REPLACE_MEMCHR"]="0"
S["HAVE_STRVERSCMP"]="1"
S["HAVE_DECL_STRSIGNAL"]="1"
S["HAVE_DECL_STRERROR_R"]="1"
S["HAVE_DECL_STRTOK_R"]="1"
S["HAVE_STRCASESTR"]="1"
S["HAVE_STRSEP"]="1"
S["HAVE_STRPBRK"]="1"
S["HAVE_DECL_STRNLEN"]="1"
S["HAVE_DECL_STRNDUP"]="1"
S["HAVE_DECL_STRDUP"]="1"
S["HAVE_STRCHRNUL"]="1"
S["HAVE_STPNCPY"]="1"
S["HAVE_STPCPY"]="1"
S["HAVE_RAWMEMCHR"]="1"
S["HAVE_DECL_MEMRCHR"]="1"
S["HAVE_MEMPCPY"]="1"
S["HAVE_DECL_MEMMEM"]="1"
S["HAVE_MEMCHR"]="1"
S["HAVE_FFSLL"]="1"
S["HAVE_FFSL"]="1"
S["HAVE_MBSLEN"]="0"
S["GNULIB_STRVERSCMP"]="0"
S["GNULIB_STRSIGNAL"]="0"
S["GNULIB_STRERROR_R"]="0"
S["GNULIB_STRERROR"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_MBSTOK_R"]="0"
S["GNULIB_MBSSEP"]="0"
S["GNULIB_MBSSPN"]="0"
S["GNULIB_MBSPBRK"]="0"
S["GNULIB_MBSCSPN"]="0"
S["GNULIB_MBSCASESTR"]="0"
S["GNULIB_MBSPCASECMP"]="0"
S["GNULIB_MBSNCASECMP"]="0"
S["GNULIB_MBSCASECMP"]="0"
S["GNULIB_MBSSTR"]="0"
S["GNULIB_MBSRCHR"]="0"
S["GNULIB_MBSCHR"]="0"
S["GNULIB_MBSNLEN"]="1"
S["GNULIB_MBSLEN"]="0"
S["GNULIB_STRTOK_R"]="0"
S["GNULIB_STRCASESTR"]="0"
S["GNULIB_STRSTR"]="1"
S["GNULIB_STRSEP"]="0"
S["GNULIB_STRPBRK"]="0"
S["GNULIB_STRNLEN"]="0"
S["GNULIB_STRNDUP"]="0"
S["GNULIB_STRNCAT"]="1"
S["GNULIB_STRDUP"]="0"
S["GNULIB_STRCHRNUL"]="0"
S["GNULIB_STPNCPY"]="0"
S["GNULIB_STPCPY"]="0"
S["GNULIB_RAWMEMCHR"]="0"
S["GNULIB_MEMRCHR"]="0"
S["GNULIB_MEMPCPY"]="0"
S["GNULIB_MEMMEM"]="0"
S["GNULIB_MEMCHR"]="1"
S["GNULIB_FFSLL"]="0"
S["GNULIB_FFSL"]="0"
S["LOCALE_FR_UTF8"]="fr_FR.UTF-8"
S["LOCALE_ZH_CN"]="zh_CN.GB18030"
S["LOCALE_JA"]="ja_JP.eucJP"
S["REPLACE_WCSWIDTH"]="0"
S["REPLACE_WCWIDTH"]="1"
S["REPLACE_WCSNRTOMBS"]="0"
S["REPLACE_WCSRTOMBS"]="0"
S["REPLACE_WCRTOMB"]="0"
S["REPLACE_MBSNRTOWCS"]="0"
S["REPLACE_MBSRTOWCS"]="0"
S["REPLACE_MBRLEN"]="0"
S["REPLACE_MBRTOWC"]="0"
S["REPLACE_MBSINIT"]="0"
S["REPLACE_WCTOB"]="0"
S["REPLACE_BTOWC"]="0"
S["REPLACE_MBSTATE_T"]="0"
S["HAVE_DECL_WCWIDTH"]="1"
S["HAVE_DECL_WCTOB"]="1"
S["HAVE_WCSWIDTH"]="1"
S["HAVE_WCSTOK"]="1"
S["HAVE_WCSSTR"]="1"
S["HAVE_WCSPBRK"]="1"
S["HAVE_WCSSPN"]="1"
S["HAVE_WCSCSPN"]="1"
S["HAVE_WCSRCHR"]="1"
S["HAVE_WCSCHR"]="1"
S["HAVE_WCSDUP"]="1"
S["HAVE_WCSXFRM"]="1"
S["HAVE_WCSCOLL"]="1"
S["HAVE_WCSNCASECMP"]="1"
S["HAVE_WCSCASECMP"]="1"
S["HAVE_WCSNCMP"]="1"
S["HAVE_WCSCMP"]="1"
S["HAVE_WCSNCAT"]="1"
S["HAVE_WCSCAT"]="1"
S["HAVE_WCPNCPY"]="1"
S["HAVE_WCSNCPY"]="1"
S["HAVE_WCPCPY"]="1"
S["HAVE_WCSCPY"]="1"
S["HAVE_WCSNLEN"]="1"
S["HAVE_WCSLEN"]="1"
S["HAVE_WMEMSET"]="1"
S["HAVE_WMEMMOVE"]="1"
S["HAVE_WMEMCPY"]="1"
S["HAVE_WMEMCMP"]="1"
S["HAVE_WMEMCHR"]="1"
S["HAVE_WCSNRTOMBS"]="1"
S["HAVE_WCSRTOMBS"]="1"
S["HAVE_WCRTOMB"]="1"
S["HAVE_MBSNRTOWCS"]="1"
S["HAVE_MBSRTOWCS"]="1"
S["HAVE_MBRLEN"]="1"
S["HAVE_MBRTOWC"]="1"
S["HAVE_MBSINIT"]="1"
S["HAVE_BTOWC"]="1"
S["GNULIB_WCSWIDTH"]="0"
S["GNULIB_WCSTOK"]="0"
S["GNULIB_WCSSTR"]="0"
S["GNULIB_WCSPBRK"]="0"
S["GNULIB_WCSSPN"]="0"
S["GNULIB_WCSCSPN"]="0"
S["GNULIB_WCSRCHR"]="0"
S["GNULIB_WCSCHR"]="0"
S["GNULIB_WCSDUP"]="0"
S["GNULIB_WCSXFRM"]="0"
S["GNULIB_WCSCOLL"]="0"
S["GNULIB_WCSNCASECMP"]="0"
S["GNULIB_WCSCASECMP"]="0"
S["GNULIB_WCSNCMP"]="0"
S["GNULIB_WCSCMP"]="0"
S["GNULIB_WCSNCAT"]="0"
S["GNULIB_WCSCAT"]="0"
S["GNULIB_WCPNCPY"]="0"
S["GNULIB_WCSNCPY"]="0"
S["GNULIB_WCPCPY"]="0"
S["GNULIB_WCSCPY"]="0"
S["GNULIB_WCSNLEN"]="0"
S["GNULIB_WCSLEN"]="0"
S["GNULIB_WMEMSET"]="0"
S["GNULIB_WMEMMOVE"]="0"
S["GNULIB_WMEMCPY"]="0"
S["GNULIB_WMEMCMP"]="0"
S["GNULIB_WMEMCHR"]="0"
S["GNULIB_WCWIDTH"]="1"
S["GNULIB_WCSNRTOMBS"]="0"
S["GNULIB_WCSRTOMBS"]="0"
S["GNULIB_WCRTOMB"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_MBSNRTOWCS"]="0"
S["GNULIB_MBSRTOWCS"]="0"
S["GNULIB_MBRLEN"]="0"
S["GNULIB_MBRTOWC"]="1"
S["GNULIB_MBSINIT"]="1"
S["GNULIB_WCTOB"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_BTOWC"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["NEXT_AS_FIRST_DIRECTIVE_MATH_H"]="<math.h>"
S["NEXT_MATH_H"]="<math.h>"
S["REPLACE_WCTOMB"]="0"
S["REPLACE_UNSETENV"]="0"
S["REPLACE_STRTOD"]="0"
S["REPLACE_SETENV"]="0"
S["REPLACE_REALPATH"]="0"
S["REPLACE_REALLOC"]="0"
S["REPLACE_RANDOM_R"]="0"
S["REPLACE_QSORT_R"]="0"
S["REPLACE_PUTENV"]="1"
S["REPLACE_PTSNAME_R"]="0"
S["REPLACE_PTSNAME"]="0"
S["REPLACE_MKSTEMP"]="0"
S["REPLACE_MBTOWC"]="0"
S["REPLACE_MALLOC"]="0"
S["REPLACE_CANONICALIZE_FILE_NAME"]="0"
S["REPLACE_CALLOC"]="0"
S["HAVE_DECL_UNSETENV"]="1"
S["HAVE_UNLOCKPT"]="1"
S["HAVE_SYS_LOADAVG_H"]="0"
S["HAVE_STRUCT_RANDOM_DATA"]="1"
S["HAVE_STRTOULL"]="1"
S["HAVE_STRTOLL"]="1"
S["HAVE_STRTOD"]="1"
S["HAVE_DECL_SETENV"]="1"
S["HAVE_SETENV"]="1"
S["HAVE_SECURE_GETENV"]="1"
S["HAVE_RPMATCH"]="1"
S["HAVE_REALPATH"]="1"
S["HAVE_RANDOM_R"]="1"
S["HAVE_RANDOM_H"]="1"
S["HAVE_RANDOM"]="1"
S["HAVE_QSORT_R"]="1"
S["HAVE_PTSNAME_R"]="1"
S["HAVE_PTSNAME"]="1"
S["HAVE_POSIX_OPENPT"]="1"
S["HAVE_MKSTEMPS"]="1"
S["HAVE_MKSTEMP"]="1"
S["HAVE_MKOSTEMPS"]="1"
S["HAVE_MKOSTEMP"]="1"
S["HAVE_MKDTEMP"]="1"
S["HAVE_GRANTPT"]="1"
S["HAVE_GETSUBOPT"]="1"
S["HAVE_DECL_GETLOADAVG"]="1"
S["HAVE_CANONICALIZE_FILE_NAME"]="1"
S["HAVE_ATOLL"]="1"
S["HAVE__EXIT"]="1"
S["GNULIB_WCTOMB"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_UNSETENV"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_UNLOCKPT"]="0"
S["GNULIB_SYSTEM_POSIX"]="0"
S["GNULIB_STRTOULL"]="0"
S["GNULIB_STRTOLL"]="0"
S["GNULIB_STRTOD"]="0"
S["GNULIB_SETENV"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_SECURE_GETENV"]="0"
S["GNULIB_RPMATCH"]="0"
S["GNULIB_REALPATH"]="0"
S["GNULIB_REALLOC_POSIX"]="0"
S["GNULIB_RANDOM_R"]="0"
S["GNULIB_RANDOM"]="0"
S["GNULIB_QSORT_R"]="0"
S["GNULIB_PUTENV"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_PTSNAME_R"]="0"
S["GNULIB_PTSNAME"]="0"
S["GNULIB_POSIX_OPENPT"]="0"
S["GNULIB_MKSTEMPS"]="0"
S["GNULIB_MKSTEMP"]="0"
S["GNULIB_MKOSTEMPS"]="0"
S["GNULIB_MKOSTEMP"]="0"
S["GNULIB_MKDTEMP"]="0"
S["GNULIB_MBTOWC"]="IN_LIBUNISTRING_GNULIB_TESTS"
S["GNULIB_MALLOC_POSIX"]="1"
S["GNULIB_GRANTPT"]="0"
S["GNULIB_GETSUBOPT"]="0"
S["GNULIB_GETLOADAVG"]="0"
S["GNULIB_CANONICALIZE_FILE_NAME"]="0"
S["GNULIB_CALLOC_POSIX"]="0"
S["GNULIB_ATOLL"]="0"
S["GNULIB__EXIT"]="0"
S["LTLIBMULTITHREAD"]="-lpthread"
S["LIBMULTITHREAD"]="-lpthread"
S["LTLIBTHREAD"]=""
S["LIBTHREAD"]=""
S["LIBPTH_PREFIX"]=""
S["LTLIBPTH"]=""
S["LIBPTH"]=""
S["INTL_MACOSX_LIBS"]="-Wl,-framework -Wl,CoreFoundation"
S["LOCALCHARSET_TESTS_ENVIRONMENT"]="CHARSETALIASDIR=\"$(abs_top_builddir)/lib\""
S["GLIBC21"]="no"
S["GL_GENERATE_LIMITS_H_FALSE"]="#"
S["GL_GENERATE_LIMITS_H_TRUE"]=""
S["LIMITS_H"]="limits.h"
S["NEXT_AS_FIRST_DIRECTIVE_LIMITS_H"]="<limits.h>"
S["NEXT_LIMITS_H"]="<limits.h>"
S["HAVE_LANGINFO_YESEXPR"]="1"
S["HAVE_LANGINFO_ERA"]="1"
S["HAVE_LANGINFO_T_FMT_AMPM"]="1"
S["HAVE_LANGINFO_CODESET"]="1"
S["HAVE_LANGINFO_H"]="1"
S["NEXT_AS_FIRST_DIRECTIVE_LANGINFO_H"]="<langinfo.h>"
S["NEXT_LANGINFO_H"]="<langinfo.h>"
S["REPLACE_NL_LANGINFO"]="0"
S["HAVE_NL_LANGINFO"]="1"
S["GNULIB_NL_LANGINFO"]="0"
S["REPLACE_TOWLOWER"]="0"
S["REPLACE_ISWCNTRL"]="0"
S["HAVE_WCTYPE_H"]="1"
S["NEXT_AS_FIRST_DIRECTIVE_WCTYPE_H"]="<wctype.h>"
S["NEXT_WCTYPE_H"]="<wctype.h>"
S["HAVE_WINT_T"]="1"
S["HAVE_ISWCNTRL"]="1"
S["REPLACE_ISWBLANK"]="0"
S["HAVE_WCTRANS_T"]="1"
S["HAVE_WCTYPE_T"]="1"
S["HAVE_ISWBLANK"]="1"
S["GNULIB_TOWCTRANS"]="0"
S["GNULIB_WCTRANS"]="0"
S["GNULIB_ISWCTYPE"]="0"
S["GNULIB_WCTYPE"]="0"
S["GNULIB_ISWBLANK"]="1"
S["NEXT_AS_FIRST_DIRECTIVE_ICONV_H"]="<iconv.h>"
S["NEXT_ICONV_H"]="<iconv.h>"
S["GL_GENERATE_ICONV_H_FALSE"]="#"
S["GL_GENERATE_ICONV_H_TRUE"]=""
S["ICONV_H"]="iconv.h"
S["REPLACE_ICONV_UTF"]="0"
S["REPLACE_ICONV_OPEN"]="0"
S["REPLACE_ICONV"]="0"
S["ICONV_CONST"]=""
S["GNULIB_ICONV"]="1"
S["LTLIBICONV"]="-liconv"
S["LIBICONV"]="-liconv"
S["HAVE_SAME_LONG_DOUBLE_AS_DOUBLE"]="0"
S["REPLACE_TRUNCL"]="0"
S["REPLACE_TRUNCF"]="0"
S["REPLACE_TRUNC"]="0"
S["REPLACE_SQRTL"]="0"
S["REPLACE_SIGNBIT_USING_GCC"]="1"
S["REPLACE_SIGNBIT"]="0"
S["REPLACE_ROUNDL"]="0"
S["REPLACE_ROUNDF"]="0"
S["REPLACE_ROUND"]="0"
S["REPLACE_REMAINDERL"]="0"
S["REPLACE_REMAINDERF"]="0"
S["REPLACE_REMAINDER"]="0"
S["REPLACE_NAN"]="0"
S["REPLACE_MODFL"]="0"
S["REPLACE_MODFF"]="0"
S["REPLACE_MODF"]="0"
S["REPLACE_LOGBL"]="0"
S["REPLACE_LOGBF"]="0"
S["REPLACE_LOGB"]="0"
S["REPLACE_LOG2L"]="0"
S["REPLACE_LOG2F"]="0"
S["REPLACE_LOG2"]="0"
S["REPLACE_LOG1PL"]="0"
S["REPLACE_LOG1PF"]="0"
S["REPLACE_LOG1P"]="0"
S["REPLACE_LOG10L"]="0"
S["REPLACE_LOG10F"]="0"
S["REPLACE_LOG10"]="0"
S["REPLACE_LOGL"]="0"
S["REPLACE_LOGF"]="0"
S["REPLACE_LOG"]="0"
S["REPLACE_LDEXPL"]="0"
S["REPLACE_ISNAN"]="0"
S["REPLACE_ISINF"]="0"
S["REPLACE_ISFINITE"]="0"
S["REPLACE_ILOGBF"]="0"
S["REPLACE_ILOGB"]="0"
S["REPLACE_HYPOTL"]="0"
S["REPLACE_HYPOTF"]="0"
S["REPLACE_HYPOT"]="0"
S["REPLACE_HUGE_VAL"]="0"
S["REPLACE_FREXPL"]="0"
S["REPLACE_FREXP"]="0"
S["REPLACE_FREXPF"]="0"
S["REPLACE_FMODL"]="0"
S["REPLACE_FMODF"]="0"
S["REPLACE_FMOD"]="0"
S["REPLACE_FMAL"]="0"
S["REPLACE_FMAF"]="0"
S["REPLACE_FMA"]="0"
S["REPLACE_FLOORL"]="0"
S["REPLACE_FLOORF"]="0"
S["REPLACE_FLOOR"]="0"
S["REPLACE_FABSL"]="0"
S["REPLACE_EXP2L"]="0"
S["REPLACE_EXP2"]="0"
S["REPLACE_EXPM1F"]="0"
S["REPLACE_EXPM1"]="0"
S["REPLACE_CEILL"]="0"
S["REPLACE_CEILF"]="0"
S["REPLACE_CEIL"]="0"
S["REPLACE_CBRTL"]="0"
S["REPLACE_CBRTF"]="0"
S["HAVE_DECL_TRUNCL"]="1"
S["HAVE_DECL_TRUNCF"]="1"
S["HAVE_DECL_TRUNC"]="1"
S["HAVE_DECL_TANL"]="1"
S["HAVE_DECL_SQRTL"]="1"
S["HAVE_DECL_SINL"]="1"
S["HAVE_DECL_ROUNDL"]="1"
S["HAVE_DECL_ROUNDF"]="1"
S["HAVE_DECL_ROUND"]="1"
S["HAVE_DECL_RINTF"]="1"
S["HAVE_DECL_REMAINDERL"]="1"
S["HAVE_DECL_REMAINDER"]="1"
S["HAVE_DECL_LOGB"]="1"
S["HAVE_DECL_LOG2L"]="1"
S["HAVE_DECL_LOG2F"]="1"
S["HAVE_DECL_LOG2"]="1"
S["HAVE_DECL_LOG10L"]="1"
S["HAVE_DECL_LOGL"]="1"
S["HAVE_DECL_LDEXPL"]="1"
S["HAVE_DECL_FREXPL"]="1"
S["HAVE_DECL_FLOORL"]="1"
S["HAVE_DECL_FLOORF"]="1"
S["HAVE_DECL_EXPM1L"]="1"
S["HAVE_DECL_EXP2L"]="1"
S["HAVE_DECL_EXP2F"]="1"
S["HAVE_DECL_EXP2"]="1"
S["HAVE_DECL_EXPL"]="1"
S["HAVE_DECL_COSL"]="1"
S["HAVE_DECL_COPYSIGNF"]="1"
S["HAVE_DECL_CEILL"]="1"
S["HAVE_DECL_CEILF"]="1"
S["HAVE_DECL_CBRTL"]="1"
S["HAVE_DECL_CBRTF"]="1"
S["HAVE_DECL_ATANL"]="1"
S["HAVE_DECL_ASINL"]="1"
S["HAVE_DECL_ACOSL"]="1"
S["HAVE_TANHF"]="1"
S["HAVE_TANL"]="1"
S["HAVE_TANF"]="1"
S["HAVE_SQRTL"]="1"
S["HAVE_SQRTF"]="1"
S["HAVE_SINHF"]="1"
S["HAVE_SINL"]="1"
S["HAVE_SINF"]="1"
S["HAVE_RINTL"]="1"
S["HAVE_RINT"]="1"
S["HAVE_REMAINDERF"]="1"
S["HAVE_REMAINDER"]="1"
S["HAVE_POWF"]="1"
S["HAVE_MODFL"]="1"
S["HAVE_MODFF"]="1"
S["HAVE_LOGBL"]="1"
S["HAVE_LOGBF"]="1"
S["HAVE_LOG1PL"]="1"
S["HAVE_LOG1PF"]="1"
S["HAVE_LOG1P"]="1"
S["HAVE_LOG10L"]="1"
S["HAVE_LOG10F"]="1"
S["HAVE_LOGL"]="1"
S["HAVE_LOGF"]="1"
S["HAVE_LDEXPF"]="1"
S["HAVE_ISNANL"]="1"
S["HAVE_ISNAND"]="1"
S["HAVE_ISNANF"]="1"
S["HAVE_ILOGBL"]="1"
S["HAVE_ILOGBF"]="1"
S["HAVE_ILOGB"]="1"
S["HAVE_HYPOTL"]="1"
S["HAVE_HYPOTF"]="1"
S["HAVE_FREXPF"]="1"
S["HAVE_FMODL"]="1"
S["HAVE_FMODF"]="1"
S["HAVE_FMAL"]="1"
S["HAVE_FMAF"]="1"
S["HAVE_FMA"]="1"
S["HAVE_FABSL"]="1"
S["HAVE_FABSF"]="1"
S["HAVE_EXPM1F"]="1"
S["HAVE_EXPM1"]="1"
S["HAVE_EXPL"]="1"
S["HAVE_EXPF"]="1"
S["HAVE_COSHF"]="1"
S["HAVE_COSL"]="1"
S["HAVE_COSF"]="1"
S["HAVE_COPYSIGNL"]="1"
S["HAVE_COPYSIGN"]="1"
S["HAVE_CBRTL"]="1"
S["HAVE_CBRTF"]="1"
S["HAVE_CBRT"]="1"
S["HAVE_ATAN2F"]="1"
S["HAVE_ATANL"]="1"
S["HAVE_ATANF"]="1"
S["HAVE_ASINL"]="1"
S["HAVE_ASINF"]="1"
S["HAVE_ACOSL"]="1"
S["HAVE_ACOSF"]="1"
S["GNULIB_TRUNCL"]="0"
S["GNULIB_TRUNCF"]="0"
S["GNULIB_TRUNC"]="0"
S["GNULIB_TANHF"]="0"
S["GNULIB_TANL"]="0"
S["GNULIB_TANF"]="0"
S["GNULIB_SQRTL"]="0"
S["GNULIB_SQRTF"]="0"
S["GNULIB_SINHF"]="0"
S["GNULIB_SINL"]="0"
S["GNULIB_SINF"]="0"
S["GNULIB_SIGNBIT"]="1"
S["GNULIB_ROUNDL"]="0"
S["GNULIB_ROUNDF"]="0"
S["GNULIB_ROUND"]="0"
S["GNULIB_RINTL"]="0"
S["GNULIB_RINTF"]="0"
S["GNULIB_RINT"]="0"
S["GNULIB_REMAINDERL"]="0"
S["GNULIB_REMAINDERF"]="0"
S["GNULIB_REMAINDER"]="0"
S["GNULIB_POWF"]="0"
S["GNULIB_MODFL"]="0"
S["GNULIB_MODFF"]="0"
S["GNULIB_MODF"]="0"
S["GNULIB_LOGBL"]="0"
S["GNULIB_LOGBF"]="0"
S["GNULIB_LOGB"]="0"
S["GNULIB_LOG2L"]="0"
S["GNULIB_LOG2F"]="0"
S["GNULIB_LOG2"]="0"
S["GNULIB_LOG1PL"]="0"
S["GNULIB_LOG1PF"]="0"
S["GNULIB_LOG1P"]="0"
S["GNULIB_LOG10L"]="0"
S["GNULIB_LOG10F"]="0"
S["GNULIB_LOG10"]="0"
S["GNULIB_LOGL"]="0"
S["GNULIB_LOGF"]="0"
S["GNULIB_LOG"]="0"
S["GNULIB_LDEXPL"]="0"
S["GNULIB_LDEXPF"]="0"
S["GNULIB_ISNANL"]="0"
S["GNULIB_ISNAND"]="0"
S["GNULIB_ISNANF"]="0"
S["GNULIB_ISNAN"]="0"
S["GNULIB_ISINF"]="0"
S["GNULIB_ISFINITE"]="0"
S["GNULIB_ILOGBL"]="0"
S["GNULIB_ILOGBF"]="0"
S["GNULIB_ILOGB"]="0"
S["GNULIB_HYPOTL"]="0"
S["GNULIB_HYPOTF"]="0"
S["GNULIB_HYPOT"]="0"
S["GNULIB_FREXPL"]="1"
S["GNULIB_FREXP"]="1"
S["GNULIB_FREXPF"]="0"
S["GNULIB_FMODL"]="0"
S["GNULIB_FMODF"]="0"
S["GNULIB_FMOD"]="0"
S["GNULIB_FMAL"]="0"
S["GNULIB_FMAF"]="0"
S["GNULIB_FMA"]="0"
S["GNULIB_FLOORL"]="0"
S["GNULIB_FLOORF"]="0"
S["GNULIB_FLOOR"]="0"
S["GNULIB_FABSL"]="0"
S["GNULIB_FABSF"]="0"
S["GNULIB_EXPM1L"]="0"
S["GNULIB_EXPM1F"]="0"
S["GNULIB_EXPM1"]="0"
S["GNULIB_EXP2L"]="0"
S["GNULIB_EXP2F"]="0"
S["GNULIB_EXP2"]="0"
S["GNULIB_EXPL"]="0"
S["GNULIB_EXPF"]="0"
S["GNULIB_COSHF"]="0"
S["GNULIB_COSL"]="0"
S["GNULIB_COSF"]="0"
S["GNULIB_COPYSIGNL"]="0"
S["GNULIB_COPYSIGNF"]="0"
S["GNULIB_COPYSIGN"]="0"
S["GNULIB_CEILL"]="0"
S["GNULIB_CEILF"]="0"
S["GNULIB_CEIL"]="0"
S["GNULIB_CBRTL"]="0"
S["GNULIB_CBRTF"]="0"
S["GNULIB_CBRT"]="0"
S["GNULIB_ATAN2F"]="0"
S["GNULIB_ATANL"]="0"
S["GNULIB_ATANF"]="0"
S["GNULIB_ASINL"]="0"
S["GNULIB_ASINF"]="0"
S["GNULIB_ACOSL"]="0"
S["GNULIB_ACOSF"]="0"
S["REPLACE_ITOLD"]="0"
S["GL_GENERATE_FLOAT_H_FALSE"]=""
S["GL_GENERATE_FLOAT_H_TRUE"]="#"
S["FLOAT_H"]=""
S["NEXT_AS_FIRST_DIRECTIVE_FLOAT_H"]=""
S["NEXT_FLOAT_H"]=""
S["EOVERFLOW_VALUE"]=""
S["EOVERFLOW_HIDDEN"]=""
S["ENOLINK_VALUE"]=""
S["ENOLINK_HIDDEN"]=""
S["EMULTIHOP_VALUE"]=""
S["EMULTIHOP_HIDDEN"]=""
S["GL_GENERATE_ERRNO_H_FALSE"]=""
S["GL_GENERATE_ERRNO_H_TRUE"]="#"
S["ERRNO_H"]=""
S["NEXT_AS_FIRST_DIRECTIVE_ERRNO_H"]=""
S["NEXT_ERRNO_H"]=""
S["PRAGMA_COLUMNS"]=""
S["PRAGMA_SYSTEM_HEADER"]="#pragma GCC system_header"
S["INCLUDE_NEXT_AS_FIRST_DIRECTIVE"]="include_next"
S["INCLUDE_NEXT"]="include_next"
S["pkglibexecdir"]="${libexecdir}/${PACKAGE}"
S["runstatedir"]="${localstatedir}/run"
S["lispdir"]="${datarootdir}/emacs/site-lisp"
S["GL_GENERATE_ALLOCA_H_FALSE"]="#"
S["GL_GENERATE_ALLOCA_H_TRUE"]=""
S["ALLOCA_H"]="alloca.h"
S["ALLOCA"]=""
S["GL_COND_LIBTOOL_FALSE"]="#"
S["GL_COND_LIBTOOL_TRUE"]=""
S["WOE32_FALSE"]=""
S["WOE32_TRUE"]="#"
S["RC"]=""
S["OTOOL64"]=":"
S["OTOOL"]="otool"
S["LIPO"]="lipo"
S["NMEDIT"]="nmedit"
S["DSYMUTIL"]="dsymutil"
S["MANIFEST_TOOL"]=":"
S["LN_S"]="ln -s"
S["NM"]="/usr/bin/nm -B"
S["ac_ct_DUMPBIN"]=""
S["DUMPBIN"]=""
S["LD"]="/Library/Developer/CommandLineTools/usr/bin/ld"
S["FGREP"]="/usr/local/bin/grep -F"
S["SED"]="/usr/local/opt/gnu-sed/libexec/gnubin/sed"
S["LIBTOOL"]="/bin/sh $(top_builddir)/libtool"
S["OBJDUMP"]="objdump"
S["DLLTOOL"]="false"
S["AS"]="as"
S["RANLIB"]="ranlib"
S["ARFLAGS"]="cr"
S["ac_ct_AR"]="ar"
S["AR"]="ar"
S["EGREP"]="/usr/local/bin/grep -E"
S["GREP"]="/usr/local/bin/grep"
S["host_os"]="darwin17.0.0"
S["host_vendor"]="apple"
S["host_cpu"]="x86_64"
S["host"]="x86_64-apple-darwin17.0.0"
S["build_os"]="darwin17.0.0"
S["build_vendor"]="apple"
S["build_cpu"]="x86_64"
S["build"]="x86_64-apple-darwin17.0.0"
S["CPP"]="cc -E"
S["am__fastdepCC_FALSE"]="#"
S["am__fastdepCC_TRUE"]=""
S["CCDEPMODE"]="depmode=gcc3"
S["am__nodep"]="_no"
S["AMDEPBACKSLASH"]="\\"
S["AMDEP_FALSE"]="#"
S["AMDEP_TRUE"]=""
S["am__quote"]=""
S["am__include"]="include"
S["DEPDIR"]=".deps"
S["OBJEXT"]="o"
S["EXEEXT"]=""
S["ac_ct_CC"]="cc"
S["CPPFLAGS"]="-I/usr/local/opt/valgrind/include -I/usr/local/opt/llvm/include -I/usr/local/opt/openblas/include -I/usr/local/opt/qt/include -I/usr/local/opt/readl"\
"ine/include -I/usr/local/opt/gettext/include -I/usr/local/opt/libxml2/include -I/usr/local/opt/libpng/include -I/usr/local/opt/zlib/include -I/usr/l"\
"ocal/opt/openssl@1.1/include "
S["LDFLAGS"]="-L/usr/local/opt/valgrind/lib -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -L/usr/local/opt/openblas/lib -L/usr/local/opt/qt/lib -L/"\
"usr/local/opt/bison/lib -L/usr/local/opt/readline/lib -L/usr/local/opt/gettext/lib -L/usr/local/opt/libxml2/lib -L/usr/local/opt/libpng/lib -L/usr/l"\
"ocal/opt/zlib/lib -L/usr/local/opt/openssl@1.1/lib "
S["CFLAGS"]="-Ofast -fomit-frame-pointer -ffast-math -fno-signed-zeros -m64 -m32 -mmmx -msse -flto -ffp-contract=fast -funroll-loops "
S["CC"]="cc"
S["AM_BACKSLASH"]="\\"
S["AM_DEFAULT_VERBOSITY"]="1"
S["AM_DEFAULT_V"]="$(AM_DEFAULT_VERBOSITY)"
S["AM_V"]="$(V)"
S["am__untar"]="$${TAR-tar} xf -"
S["am__tar"]="${AMTAR} chof - --owner=root --group=root \"$$tardir\""
S["AMTAR"]="$${TAR-tar}"
S["am__leading_dot"]="."
S["SET_MAKE"]=""
S["AWK"]="gawk"
S["mkdir_p"]="$(MKDIR_P)"
S["MKDIR_P"]="/usr/local/opt/coreutils/libexec/gnubin/mkdir -p"
S["INSTALL_STRIP_PROGRAM"]="$(install_sh) -c -s"
S["STRIP"]="strip"
S["install_sh"]="${SHELL} /Users/dojo/Library/Caches/Homebrew/libunistring-0.9.7/build-aux/install-sh"
S["MAKEINFO"]="${SHELL} /Users/dojo/Library/Caches/Homebrew/libunistring-0.9.7/build-aux/missing makeinfo"
S["AUTOHEADER"]="${SHELL} /Users/dojo/Library/Caches/Homebrew/libunistring-0.9.7/build-aux/missing autoheader"
S["AUTOMAKE"]="${SHELL} /Users/dojo/Library/Caches/Homebrew/libunistring-0.9.7/build-aux/missing automake-1.15"
S["AUTOCONF"]="${SHELL} /Users/dojo/Library/Caches/Homebrew/libunistring-0.9.7/build-aux/missing autoconf"
S["ACLOCAL"]="${SHELL} /Users/dojo/Library/Caches/Homebrew/libunistring-0.9.7/build-aux/missing aclocal-1.15"
S["VERSION"]="0.9.7"
S["PACKAGE"]="libunistring"
S["CYGPATH_W"]="echo"
S["am__isrc"]=""
S["INSTALL_DATA"]="${INSTALL} -m 644"
S["INSTALL_SCRIPT"]="${INSTALL}"
S["INSTALL_PROGRAM"]="${INSTALL}"
S["target_alias"]=""
S["host_alias"]=""
S["build_alias"]=""
S["LIBS"]=""
S["ECHO_T"]=""
S["ECHO_N"]=""
S["ECHO_C"]="\\c"
S["DEFS"]="-DHAVE_CONFIG_H"
S["mandir"]="${datarootdir}/man"
S["localedir"]="${datarootdir}/locale"
S["libdir"]="${exec_prefix}/lib"
S["psdir"]="${docdir}"
S["pdfdir"]="${docdir}"
S["dvidir"]="${docdir}"
S["htmldir"]="${docdir}"
S["infodir"]="${datarootdir}/info"
S["docdir"]="${datarootdir}/doc/${PACKAGE}"
S["oldincludedir"]="/usr/include"
S["includedir"]="${prefix}/include"
S["localstatedir"]="${prefix}/var"
S["sharedstatedir"]="${prefix}/com"
S["sysconfdir"]="${prefix}/etc"
S["datadir"]="${datarootdir}"
S["datarootdir"]="${prefix}/share"
S["libexecdir"]="${exec_prefix}/libexec"
S["sbindir"]="${exec_prefix}/sbin"
S["bindir"]="${exec_prefix}/bin"
S["program_transform_name"]="s,x,x,"
S["prefix"]="/usr/local/Cellar/libunistring/0.9.7"
S["exec_prefix"]="${prefix}"
S["PACKAGE_URL"]=""
S["PACKAGE_BUGREPORT"]=""
S["PACKAGE_STRING"]=""
S["PACKAGE_VERSION"]=""
S["PACKAGE_TARNAME"]=""
S["PACKAGE_NAME"]=""
S["PATH_SEPARATOR"]=":"
S["SHELL"]="/bin/sh"
_ACAWK
cat >>"$ac_tmp/subs1.awk" <<_ACAWK &&
  for (key in S) S_is_set[key] = 1
  FS = ""

}
{
  line = $ 0
  nfields = split(line, field, "@")
  substed = 0
  len = length(field[1])
  for (i = 2; i < nfields; i++) {
    key = field[i]
    keylen = length(key)
    if (S_is_set[key]) {
      value = S[key]
      line = substr(line, 1, len) "" value "" substr(line, len + keylen + 3)
      len += length(value) + length(field[++i])
      substed = 1
    } else
      len += 1 + keylen
  }

  print line
}

_ACAWK
if sed "s/$ac_cr//" < /dev/null > /dev/null 2>&1; then
  sed "s/$ac_cr\$//; s/$ac_cr/$ac_cs_awk_cr/g"
else
  cat
fi < "$ac_tmp/subs1.awk" > "$ac_tmp/subs.awk" \
  || as_fn_error $? "could not setup config files machinery" "$LINENO" 5
fi # test -n "$CONFIG_FILES"

# Set up the scripts for CONFIG_HEADERS section.
# No need to generate them if there are no CONFIG_HEADERS.
# This happens for instance with `./config.status Makefile'.
if test -n "$CONFIG_HEADERS"; then
cat >"$ac_tmp/defines.awk" <<\_ACAWK ||
BEGIN {
D["PACKAGE_NAME"]=" \"\""
D["PACKAGE_TARNAME"]=" \"\""
D["PACKAGE_VERSION"]=" \"\""
D["PACKAGE_STRING"]=" \"\""
D["PACKAGE_BUGREPORT"]=" \"\""
D["PACKAGE_URL"]=" \"\""
D["PACKAGE"]=" \"libunistring\""
D["VERSION"]=" \"0.9.7\""
D["STDC_HEADERS"]=" 1"
D["HAVE_SYS_TYPES_H"]=" 1"
D["HAVE_SYS_STAT_H"]=" 1"
D["HAVE_STDLIB_H"]=" 1"
D["HAVE_STRING_H"]=" 1"
D["HAVE_MEMORY_H"]=" 1"
D["HAVE_STRINGS_H"]=" 1"
D["HAVE_INTTYPES_H"]=" 1"
D["HAVE_STDINT_H"]=" 1"
D["HAVE_UNISTD_H"]=" 1"
D["__EXTENSIONS__"]=" 1"
D["_ALL_SOURCE"]=" 1"
D["_DARWIN_C_SOURCE"]=" 1"
D["_GNU_SOURCE"]=" 1"
D["_POSIX_PTHREAD_SEMANTICS"]=" 1"
D["__STDC_WANT_IEC_60559_ATTRIBS_EXT__"]=" 1"
D["__STDC_WANT_IEC_60559_BFP_EXT__"]=" 1"
D["__STDC_WANT_IEC_60559_DFP_EXT__"]=" 1"
D["__STDC_WANT_IEC_60559_FUNCS_EXT__"]=" 1"
D["__STDC_WANT_IEC_60559_TYPES_EXT__"]=" 1"
D["__STDC_WANT_LIB_EXT2__"]=" 1"
D["__STDC_WANT_MATH_SPEC_FUNCS__"]=" 1"
D["_TANDEM_SOURCE"]=" 1"
D["HAVE_DLFCN_H"]=" 1"
D["LT_OBJDIR"]=" \".libs/\""
D["HAVE_ALLOCA_H"]=" 1"
D["HAVE_ALLOCA"]=" 1"
D["HAVE_DECL_ALARM"]=" 1"
D["HAVE_ISWCNTRL"]=" 1"
D["HAVE_ISWBLANK"]=" 1"
D["HAVE_SYMLINK"]=" 1"
D["HAVE_MBSINIT"]=" 1"
D["HAVE_MBRTOWC"]=" 1"
D["HAVE_MPROTECT"]=" 1"
D["HAVE_SNPRINTF"]=" 1"
D["HAVE_STPCPY"]=" 1"
D["HAVE_STRDUP"]=" 1"
D["HAVE_WCWIDTH"]=" 1"
D["HAVE_BTOWC"]=" 1"
D["HAVE_GETPROGNAME"]=" 1"
D["HAVE_NEWLOCALE"]=" 1"
D["HAVE_SETENV"]=" 1"
D["HAVE_WCRTOMB"]=" 1"
D["HAVE_WCTOB"]=" 1"
D["HAVE_ICONV"]=" 1"
D["ICONV_CONST"]=" "
D["HAVE_ICONV_H"]=" 1"
D["HAVE_WCTYPE_H"]=" 1"
D["HAVE_LANGINFO_H"]=" 1"
D["HAVE_LIMITS_H"]=" 1"
D["HAVE_UNISTD_H"]=" 1"
D["HAVE_MATH_H"]=" 1"
D["HAVE_SYS_MMAN_H"]=" 1"
D["HAVE_WCHAR_H"]=" 1"
D["HAVE_STDINT_H"]=" 1"
D["HAVE_INTTYPES_H"]=" 1"
D["HAVE_XLOCALE_H"]=" 1"
D["HAVE_SYS_SOCKET_H"]=" 1"
D["DBL_EXPBIT0_WORD"]=" 1"
D["DBL_EXPBIT0_BIT"]=" 20"
D["FLT_EXPBIT0_WORD"]=" 0"
D["FLT_EXPBIT0_BIT"]=" 23"
D["HAVE_WINT_T"]=" 1"
D["HAVE_TOWLOWER"]=" 1"
D["HAVE_RAW_DECL_WCTYPE"]=" 1"
D["HAVE_RAW_DECL_ISWCTYPE"]=" 1"
D["HAVE_RAW_DECL_WCTRANS"]=" 1"
D["HAVE_RAW_DECL_TOWCTRANS"]=" 1"
D["HAVE_LANGINFO_CODESET"]=" 1"
D["HAVE_WORKING_O_NOATIME"]=" 0"
D["HAVE_WORKING_O_NOFOLLOW"]=" 1"
D["HAVE_DECL_GETC_UNLOCKED"]=" 1"
D["HAVE_LC_MESSAGES"]=" 1"
D["HAVE_CFPREFERENCESCOPYAPPVALUE"]=" 1"
D["HAVE_CFLOCALECOPYCURRENT"]=" 1"
D["USE_POSIX_THREADS"]=" 1"
D["HAVE_STDLIB_H"]=" 1"
D["MALLOC_0_IS_NONNULL"]=" 1"
D["HAVE_UNSIGNED_LONG_LONG_INT"]=" 1"
D["HAVE_LONG_LONG_INT"]=" 1"
D["HAVE_MBSTATE_T"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MINMAX_IN_SYS_PARAM_H"]=" 1"
D["INSTALLPREFIX"]=" \"/usr/local/Cellar/libunistring/0.9.7\""
D["ENABLE_RELOCATABLE"]=" 1"
D["HAVE__BOOL"]=" 1"
D["HAVE_WCHAR_T"]=" 1"
D["BITSIZEOF_PTRDIFF_T"]=" 32"
D["BITSIZEOF_SIZE_T"]=" 32"
D["BITSIZEOF_SIG_ATOMIC_T"]=" 32"
D["BITSIZEOF_WCHAR_T"]=" 32"
D["BITSIZEOF_WINT_T"]=" 32"
D["HAVE_SIGNED_SIG_ATOMIC_T"]=" 1"
D["HAVE_SIGNED_WCHAR_T"]=" 1"
D["HAVE_SIGNED_WINT_T"]=" 1"
D["PTRDIFF_T_SUFFIX"]=" "
D["SIZE_T_SUFFIX"]=" ul"
D["SIG_ATOMIC_T_SUFFIX"]=" "
D["WCHAR_T_SUFFIX"]=" "
D["WINT_T_SUFFIX"]=" "
D["restrict"]=" __restrict"
D["HAVE_RAW_DECL_FFSL"]=" 1"
D["HAVE_RAW_DECL_FFSLL"]=" 1"
D["HAVE_RAW_DECL_MEMMEM"]=" 1"
D["HAVE_RAW_DECL_STPCPY"]=" 1"
D["HAVE_RAW_DECL_STPNCPY"]=" 1"
D["HAVE_RAW_DECL_STRDUP"]=" 1"
D["HAVE_RAW_DECL_STRNCAT"]=" 1"
D["HAVE_RAW_DECL_STRNDUP"]=" 1"
D["HAVE_RAW_DECL_STRNLEN"]=" 1"
D["HAVE_RAW_DECL_STRPBRK"]=" 1"
D["HAVE_RAW_DECL_STRSEP"]=" 1"
D["HAVE_RAW_DECL_STRCASESTR"]=" 1"
D["HAVE_RAW_DECL_STRTOK_R"]=" 1"
D["HAVE_RAW_DECL_STRERROR_R"]=" 1"
D["HAVE_RAW_DECL_STRSIGNAL"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_INTTYPES_H_WITH_UINTMAX"]=" 1"
D["HAVE_STDINT_H_WITH_UINTMAX"]=" 1"
D["HAVE_INTMAX_T"]=" 1"
D["HAVE_SNPRINTF"]=" 1"
D["HAVE_STRNLEN"]=" 1"
D["HAVE_WCSLEN"]=" 1"
D["HAVE_WCSNLEN"]=" 1"
D["HAVE_MBRTOWC"]=" 1"
D["HAVE_WCRTOMB"]=" 1"
D["HAVE_DECL__SNPRINTF"]=" 0"
D["HAVE_SNPRINTF_RETVAL_C99"]=" 1"
D["CHECK_PRINTF_SAFE"]=" 1"
D["HAVE_DECL_STRERROR_R"]=" 1"
D["HAVE_STRERROR_R"]=" 1"
D["HAVE_RAW_DECL_IMAXABS"]=" 1"
D["HAVE_RAW_DECL_IMAXDIV"]=" 1"
D["HAVE_RAW_DECL_STRTOIMAX"]=" 1"
D["HAVE_RAW_DECL_STRTOUMAX"]=" 1"
D["HAVE_INTTYPES_H"]=" 1"
D["HAVE_DECL_SETENV"]=" 1"
D["HAVE_SEARCH_H"]=" 1"
D["HAVE_TSEARCH"]=" 1"
D["REPLACE_STRERROR_0"]=" 1"
D["HAVE_DECL_UNSETENV"]=" 1"
D["HAVE_ALLOCA"]=" 1"
D["FLEXIBLE_ARRAY_MEMBER"]=" /**/"
D["HAVE_FREXP_IN_LIBC"]=" 1"
D["GNULIB_TEST_FREXP"]=" 1"
D["HAVE_FREXPL_IN_LIBC"]=" 1"
D["GNULIB_TEST_FREXPL"]=" 1"
D["HAVE_INLINE"]=" 1"
D["HAVE_ISNAND_IN_LIBC"]=" 1"
D["FLT_EXPBIT0_WORD"]=" 0"
D["FLT_EXPBIT0_BIT"]=" 23"
D["LDBL_EXPBIT0_WORD"]=" 2"
D["LDBL_EXPBIT0_BIT"]=" 0"
D["HAVE_DECL_ISWBLANK"]=" 1"
D["GNULIB_TEST_ISWBLANK"]=" 1"
D["HAVE_RAW_DECL_NL_LANGINFO"]=" 1"
D["HAVE_SETLOCALE"]=" 1"
D["HAVE_USELOCALE"]=" 1"
D["HAVE_PTHREAD_RWLOCK"]=" 1"
D["HAVE_PTHREAD_MUTEX_RECURSIVE"]=" 1"
D["GNULIB_LOCK"]=" 1"
D["HAVE_MALLOC_POSIX"]=" 1"
D["GNULIB_TEST_MALLOC_POSIX"]=" 1"
D["HAVE_RAW_DECL_ACOSF"]=" 1"
D["HAVE_RAW_DECL_ACOSL"]=" 1"
D["HAVE_RAW_DECL_ASINF"]=" 1"
D["HAVE_RAW_DECL_ASINL"]=" 1"
D["HAVE_RAW_DECL_ATANF"]=" 1"
D["HAVE_RAW_DECL_ATANL"]=" 1"
D["HAVE_RAW_DECL_CBRT"]=" 1"
D["HAVE_RAW_DECL_CBRTF"]=" 1"
D["HAVE_RAW_DECL_CBRTL"]=" 1"
D["HAVE_RAW_DECL_CEILF"]=" 1"
D["HAVE_RAW_DECL_CEILL"]=" 1"
D["HAVE_RAW_DECL_COPYSIGN"]=" 1"
D["HAVE_RAW_DECL_COPYSIGNF"]=" 1"
D["HAVE_RAW_DECL_COPYSIGNL"]=" 1"
D["HAVE_RAW_DECL_COSF"]=" 1"
D["HAVE_RAW_DECL_COSL"]=" 1"
D["HAVE_RAW_DECL_COSHF"]=" 1"
D["HAVE_RAW_DECL_EXPF"]=" 1"
D["HAVE_RAW_DECL_EXPL"]=" 1"
D["HAVE_RAW_DECL_EXP2"]=" 1"
D["HAVE_RAW_DECL_EXP2F"]=" 1"
D["HAVE_RAW_DECL_EXP2L"]=" 1"
D["HAVE_RAW_DECL_EXPM1"]=" 1"
D["HAVE_RAW_DECL_EXPM1F"]=" 1"
D["HAVE_RAW_DECL_EXPM1L"]=" 1"
D["HAVE_RAW_DECL_FABSF"]=" 1"
D["HAVE_RAW_DECL_FABSL"]=" 1"
D["HAVE_RAW_DECL_FLOORF"]=" 1"
D["HAVE_RAW_DECL_FLOORL"]=" 1"
D["HAVE_RAW_DECL_FMA"]=" 1"
D["HAVE_RAW_DECL_FMAF"]=" 1"
D["HAVE_RAW_DECL_FMAL"]=" 1"
D["HAVE_RAW_DECL_FMOD"]=" 1"
D["HAVE_RAW_DECL_FMODF"]=" 1"
D["HAVE_RAW_DECL_FMODL"]=" 1"
D["HAVE_RAW_DECL_FREXPF"]=" 1"
D["HAVE_RAW_DECL_FREXPL"]=" 1"
D["HAVE_RAW_DECL_HYPOTF"]=" 1"
D["HAVE_RAW_DECL_HYPOTL"]=" 1"
D["HAVE_RAW_DECL_ILOGB"]=" 1"
D["HAVE_RAW_DECL_ILOGBF"]=" 1"
D["HAVE_RAW_DECL_ILOGBL"]=" 1"
D["HAVE_RAW_DECL_LDEXPF"]=" 1"
D["HAVE_RAW_DECL_LDEXPL"]=" 1"
D["HAVE_RAW_DECL_LOG"]=" 1"
D["HAVE_RAW_DECL_LOGF"]=" 1"
D["HAVE_RAW_DECL_LOGL"]=" 1"
D["HAVE_RAW_DECL_LOG10"]=" 1"
D["HAVE_RAW_DECL_LOG10F"]=" 1"
D["HAVE_RAW_DECL_LOG10L"]=" 1"
D["HAVE_RAW_DECL_LOG1P"]=" 1"
D["HAVE_RAW_DECL_LOG1PF"]=" 1"
D["HAVE_RAW_DECL_LOG1PL"]=" 1"
D["HAVE_RAW_DECL_LOG2"]=" 1"
D["HAVE_RAW_DECL_LOG2F"]=" 1"
D["HAVE_RAW_DECL_LOG2L"]=" 1"
D["HAVE_RAW_DECL_LOGB"]=" 1"
D["HAVE_RAW_DECL_LOGBF"]=" 1"
D["HAVE_RAW_DECL_LOGBL"]=" 1"
D["HAVE_RAW_DECL_MODF"]=" 1"
D["HAVE_RAW_DECL_MODFF"]=" 1"
D["HAVE_RAW_DECL_MODFL"]=" 1"
D["HAVE_RAW_DECL_POWF"]=" 1"
D["HAVE_RAW_DECL_REMAINDER"]=" 1"
D["HAVE_RAW_DECL_REMAINDERF"]=" 1"
D["HAVE_RAW_DECL_REMAINDERL"]=" 1"
D["HAVE_RAW_DECL_RINT"]=" 1"
D["HAVE_RAW_DECL_RINTF"]=" 1"
D["HAVE_RAW_DECL_RINTL"]=" 1"
D["HAVE_RAW_DECL_ROUND"]=" 1"
D["HAVE_RAW_DECL_ROUNDF"]=" 1"
D["HAVE_RAW_DECL_ROUNDL"]=" 1"
D["HAVE_RAW_DECL_SINF"]=" 1"
D["HAVE_RAW_DECL_SINL"]=" 1"
D["HAVE_RAW_DECL_SINHF"]=" 1"
D["HAVE_RAW_DECL_SQRTF"]=" 1"
D["HAVE_RAW_DECL_SQRTL"]=" 1"
D["HAVE_RAW_DECL_TANF"]=" 1"
D["HAVE_RAW_DECL_TANL"]=" 1"
D["HAVE_RAW_DECL_TANHF"]=" 1"
D["HAVE_RAW_DECL_TRUNC"]=" 1"
D["HAVE_RAW_DECL_TRUNCF"]=" 1"
D["HAVE_RAW_DECL_TRUNCL"]=" 1"
D["GNULIB_TEST_MBRTOWC"]=" 1"
D["GNULIB_TEST_MBSINIT"]=" 1"
D["GNULIB_TEST_MBSNLEN"]=" 1"
D["GNULIB_TEST_MEMCHR"]=" 1"
D["HAVE_FREXP_IN_LIBC"]=" 1"
D["HAVE_LDEXP_IN_LIBC"]=" 1"
D["HAVE_FREXPL_IN_LIBC"]=" 1"
D["HAVE_LDEXPL_IN_LIBC"]=" 1"
D["GNULIB_TEST_SIGNBIT"]=" 1"
D["HAVE_STDINT_H"]=" 1"
D["HAVE_RAW_DECL__EXIT"]=" 1"
D["HAVE_RAW_DECL_ATOLL"]=" 1"
D["HAVE_RAW_DECL_GETLOADAVG"]=" 1"
D["HAVE_RAW_DECL_GETSUBOPT"]=" 1"
D["HAVE_RAW_DECL_GRANTPT"]=" 1"
D["HAVE_RAW_DECL_INITSTATE"]=" 1"
D["HAVE_RAW_DECL_MKSTEMP"]=" 1"
D["HAVE_RAW_DECL_POSIX_OPENPT"]=" 1"
D["HAVE_RAW_DECL_PTSNAME"]=" 1"
D["HAVE_RAW_DECL_QSORT_R"]=" 1"
D["HAVE_RAW_DECL_RANDOM"]=" 1"
D["HAVE_RAW_DECL_REALPATH"]=" 1"
D["HAVE_RAW_DECL_SETENV"]=" 1"
D["HAVE_RAW_DECL_SETSTATE"]=" 1"
D["HAVE_RAW_DECL_SRANDOM"]=" 1"
D["HAVE_RAW_DECL_STRTOD"]=" 1"
D["HAVE_RAW_DECL_STRTOLL"]=" 1"
D["HAVE_RAW_DECL_STRTOULL"]=" 1"
D["HAVE_RAW_DECL_UNLOCKPT"]=" 1"
D["HAVE_RAW_DECL_UNSETENV"]=" 1"
D["GNULIB_TEST_STRNCAT"]=" 1"
D["GNULIB_TEST_STRSTR"]=" 1"
D["GNULIB_UNIGBRK_U16_GRAPHEME_BREAKS"]=" 1"
D["GNULIB_UNIGBRK_U16_GRAPHEME_NEXT"]=" 1"
D["GNULIB_UNIGBRK_U16_GRAPHEME_PREV"]=" 1"
D["GNULIB_UNIGBRK_U32_GRAPHEME_BREAKS"]=" 1"
D["GNULIB_UNIGBRK_U32_GRAPHEME_NEXT"]=" 1"
D["GNULIB_UNIGBRK_U32_GRAPHEME_PREV"]=" 1"
D["GNULIB_UNIGBRK_U8_GRAPHEME_BREAKS"]=" 1"
D["GNULIB_UNIGBRK_U8_GRAPHEME_NEXT"]=" 1"
D["GNULIB_UNIGBRK_U8_GRAPHEME_PREV"]=" 1"
D["GNULIB_UNIGBRK_ULC_GRAPHEME_BREAKS"]=" 1"
D["GNULIB_TEST_UNINORM_U16_NORMALIZE"]=" 1"
D["GNULIB_TEST_UNINORM_U32_NORMALIZE"]=" 1"
D["GNULIB_TEST_UNINORM_U8_NORMALIZE"]=" 1"
D["HAVE_RAW_DECL_CHDIR"]=" 1"
D["HAVE_RAW_DECL_CHOWN"]=" 1"
D["HAVE_RAW_DECL_DUP"]=" 1"
D["HAVE_RAW_DECL_DUP2"]=" 1"
D["HAVE_RAW_DECL_FACCESSAT"]=" 1"
D["HAVE_RAW_DECL_FCHDIR"]=" 1"
D["HAVE_RAW_DECL_FCHOWNAT"]=" 1"
D["HAVE_RAW_DECL_FSYNC"]=" 1"
D["HAVE_RAW_DECL_FTRUNCATE"]=" 1"
D["HAVE_RAW_DECL_GETCWD"]=" 1"
D["HAVE_RAW_DECL_GETDOMAINNAME"]=" 1"
D["HAVE_RAW_DECL_GETDTABLESIZE"]=" 1"
D["HAVE_RAW_DECL_GETGROUPS"]=" 1"
D["HAVE_RAW_DECL_GETHOSTNAME"]=" 1"
D["HAVE_RAW_DECL_GETLOGIN"]=" 1"
D["HAVE_RAW_DECL_GETLOGIN_R"]=" 1"
D["HAVE_RAW_DECL_GETPAGESIZE"]=" 1"
D["HAVE_RAW_DECL_GETUSERSHELL"]=" 1"
D["HAVE_RAW_DECL_SETUSERSHELL"]=" 1"
D["HAVE_RAW_DECL_ENDUSERSHELL"]=" 1"
D["HAVE_RAW_DECL_ISATTY"]=" 1"
D["HAVE_RAW_DECL_LCHOWN"]=" 1"
D["HAVE_RAW_DECL_LINK"]=" 1"
D["HAVE_RAW_DECL_LINKAT"]=" 1"
D["HAVE_RAW_DECL_LSEEK"]=" 1"
D["HAVE_RAW_DECL_PIPE"]=" 1"
D["HAVE_RAW_DECL_PREAD"]=" 1"
D["HAVE_RAW_DECL_PWRITE"]=" 1"
D["HAVE_RAW_DECL_READLINK"]=" 1"
D["HAVE_RAW_DECL_READLINKAT"]=" 1"
D["HAVE_RAW_DECL_RMDIR"]=" 1"
D["HAVE_RAW_DECL_SETHOSTNAME"]=" 1"
D["HAVE_RAW_DECL_SLEEP"]=" 1"
D["HAVE_RAW_DECL_SYMLINK"]=" 1"
D["HAVE_RAW_DECL_SYMLINKAT"]=" 1"
D["HAVE_RAW_DECL_TTYNAME_R"]=" 1"
D["HAVE_RAW_DECL_UNLINK"]=" 1"
D["HAVE_RAW_DECL_UNLINKAT"]=" 1"
D["HAVE_RAW_DECL_USLEEP"]=" 1"
D["NEED_PRINTF_INFINITE_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_LONG_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_LONG_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_LONG_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_LONG_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_LONG_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_LONG_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_DOUBLE"]=" 1"
D["NEED_PRINTF_INFINITE_LONG_DOUBLE"]=" 1"
D["GNULIB_UNISTR_U16_MBTOUC"]=" 1"
D["GNULIB_UNISTR_U16_MBTOUC_UNSAFE"]=" 1"
D["GNULIB_UNISTR_U16_MBTOUCR"]=" 1"
D["GNULIB_UNISTR_U16_UCTOMB"]=" 1"
D["GNULIB_UNISTR_U32_MBTOUC"]=" 1"
D["GNULIB_UNISTR_U32_MBTOUC_UNSAFE"]=" 1"
D["GNULIB_UNISTR_U32_MBTOUCR"]=" 1"
D["GNULIB_UNISTR_U32_UCTOMB"]=" 1"
D["GNULIB_UNISTR_U8_MBTOUC"]=" 1"
D["GNULIB_UNISTR_U8_MBTOUC_UNSAFE"]=" 1"
D["GNULIB_UNISTR_U8_MBTOUCR"]=" 1"
D["GNULIB_UNISTR_U8_UCTOMB"]=" 1"
D["HAVE_RAW_DECL_BTOWC"]=" 1"
D["HAVE_RAW_DECL_WCTOB"]=" 1"
D["HAVE_RAW_DECL_MBSINIT"]=" 1"
D["HAVE_RAW_DECL_MBRTOWC"]=" 1"
D["HAVE_RAW_DECL_MBRLEN"]=" 1"
D["HAVE_RAW_DECL_MBSRTOWCS"]=" 1"
D["HAVE_RAW_DECL_MBSNRTOWCS"]=" 1"
D["HAVE_RAW_DECL_WCRTOMB"]=" 1"
D["HAVE_RAW_DECL_WCSRTOMBS"]=" 1"
D["HAVE_RAW_DECL_WCSNRTOMBS"]=" 1"
D["HAVE_RAW_DECL_WCWIDTH"]=" 1"
D["HAVE_RAW_DECL_WMEMCHR"]=" 1"
D["HAVE_RAW_DECL_WMEMCMP"]=" 1"
D["HAVE_RAW_DECL_WMEMCPY"]=" 1"
D["HAVE_RAW_DECL_WMEMMOVE"]=" 1"
D["HAVE_RAW_DECL_WMEMSET"]=" 1"
D["HAVE_RAW_DECL_WCSLEN"]=" 1"
D["HAVE_RAW_DECL_WCSNLEN"]=" 1"
D["HAVE_RAW_DECL_WCSCPY"]=" 1"
D["HAVE_RAW_DECL_WCPCPY"]=" 1"
D["HAVE_RAW_DECL_WCSNCPY"]=" 1"
D["HAVE_RAW_DECL_WCPNCPY"]=" 1"
D["HAVE_RAW_DECL_WCSCAT"]=" 1"
D["HAVE_RAW_DECL_WCSNCAT"]=" 1"
D["HAVE_RAW_DECL_WCSCMP"]=" 1"
D["HAVE_RAW_DECL_WCSNCMP"]=" 1"
D["HAVE_RAW_DECL_WCSCASECMP"]=" 1"
D["HAVE_RAW_DECL_WCSNCASECMP"]=" 1"
D["HAVE_RAW_DECL_WCSCOLL"]=" 1"
D["HAVE_RAW_DECL_WCSXFRM"]=" 1"
D["HAVE_RAW_DECL_WCSDUP"]=" 1"
D["HAVE_RAW_DECL_WCSCHR"]=" 1"
D["HAVE_RAW_DECL_WCSRCHR"]=" 1"
D["HAVE_RAW_DECL_WCSCSPN"]=" 1"
D["HAVE_RAW_DECL_WCSSPN"]=" 1"
D["HAVE_RAW_DECL_WCSPBRK"]=" 1"
D["HAVE_RAW_DECL_WCSSTR"]=" 1"
D["HAVE_RAW_DECL_WCSTOK"]=" 1"
D["HAVE_RAW_DECL_WCSWIDTH"]=" 1"
D["HAVE_TOWLOWER"]=" 1"
D["HAVE_RAW_DECL_WCTYPE"]=" 1"
D["HAVE_RAW_DECL_ISWCTYPE"]=" 1"
D["HAVE_RAW_DECL_WCTRANS"]=" 1"
D["HAVE_RAW_DECL_TOWCTRANS"]=" 1"
D["HAVE_DECL_WCWIDTH"]=" 1"
D["GNULIB_TEST_WCWIDTH"]=" 1"
D["HAVE_STDINT_H"]=" 1"
D["GNULIB_TEST_BTOWC"]=" 1"
D["HAVE_RAW_DECL_ISBLANK"]=" 1"
D["GNULIB_TEST_ENVIRON"]=" 1"
D["GNULIB_TEST_FDOPEN"]=" 1"
D["HAVE_GETPAGESIZE"]=" 1"
D["GNULIB_TEST_GETPAGESIZE"]=" 1"
D["HAVE_DECL_PROGRAM_INVOCATION_NAME"]=" 0"
D["HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME"]=" 0"
D["HAVE_DECL___ARGV"]=" 0"
D["HAVE_VAR___PROGNAME"]=" 1"
D["DBL_EXPBIT0_WORD"]=" 1"
D["DBL_EXPBIT0_BIT"]=" 20"
D["FLT_EXPBIT0_WORD"]=" 0"
D["FLT_EXPBIT0_BIT"]=" 23"
D["LDBL_EXPBIT0_WORD"]=" 2"
D["LDBL_EXPBIT0_BIT"]=" 0"
D["HAVE_RAW_DECL_SETLOCALE"]=" 1"
D["HAVE_RAW_DECL_DUPLOCALE"]=" 1"
D["GNULIB_TEST_MBTOWC"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_DECL__PUTENV"]=" 0"
D["GNULIB_TEST_PUTENV"]=" 1"
D["GNULIB_TEST_SETENV"]=" 1"
D["GNULIB_TEST_SETLOCALE"]=" 1"
D["__USE_MINGW_ANSI_STDIO"]=" 1"
D["GNULIB_FSCANF"]=" IN_LIBUNISTRING_GNULIB_TESTS"
D["GNULIB_SCANF"]=" IN_LIBUNISTRING_GNULIB_TESTS"
D["HAVE_RAW_DECL_DPRINTF"]=" 1"
D["HAVE_RAW_DECL_FPURGE"]=" 1"
D["HAVE_RAW_DECL_FSEEKO"]=" 1"
D["HAVE_RAW_DECL_FTELLO"]=" 1"
D["HAVE_RAW_DECL_GETDELIM"]=" 1"
D["HAVE_RAW_DECL_GETLINE"]=" 1"
D["HAVE_RAW_DECL_GETS"]=" 1"
D["HAVE_RAW_DECL_PCLOSE"]=" 1"
D["HAVE_RAW_DECL_POPEN"]=" 1"
D["HAVE_RAW_DECL_RENAMEAT"]=" 1"
D["HAVE_RAW_DECL_SNPRINTF"]=" 1"
D["HAVE_RAW_DECL_TMPFILE"]=" 1"
D["HAVE_RAW_DECL_VDPRINTF"]=" 1"
D["HAVE_RAW_DECL_VSNPRINTF"]=" 1"
D["GNULIB_STRERROR"]=" IN_LIBUNISTRING_GNULIB_TESTS"
D["GNULIB_TEST_STRERROR"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_PTHREAD_ATFORK"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_MAP_ANONYMOUS"]=" 1"
D["HAVE_UNSETENV"]=" 1"
D["GNULIB_TEST_UNSETENV"]=" 1"
D["GNULIB_TEST_WCRTOMB"]=" 1"
D["HAVE_DECL_WCTOB"]=" 1"
D["GNULIB_TEST_WCTOB"]=" 1"
D["GNULIB_TEST_WCTOMB"]=" 1"
  for (key in D) D_is_set[key] = 1
  FS = ""
}
/^[\t ]*#[\t ]*(define|undef)[\t ]+[_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ][_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789]*([\t (]|$)/ {
  line = $ 0
  split(line, arg, " ")
  if (arg[1] == "#") {
    defundef = arg[2]
    mac1 = arg[3]
  } else {
    defundef = substr(arg[1], 2)
    mac1 = arg[2]
  }
  split(mac1, mac2, "(") #)
  macro = mac2[1]
  prefix = substr(line, 1, index(line, defundef) - 1)
  if (D_is_set[macro]) {
    # Preserve the white space surrounding the "#".
    print prefix "define", macro P[macro] D[macro]
    next
  } else {
    # Replace #undef with comments.  This is necessary, for example,
    # in the case of _POSIX_SOURCE, which is predefined and required
    # on some systems where configure will not decide to define it.
    if (defundef == "undef") {
      print "/*", prefix defundef, macro, "*/"
      next
    }
  }
}
{ print }
_ACAWK
  as_fn_error $? "could not setup config headers machinery" "$LINENO" 5
fi # test -n "$CONFIG_HEADERS"


eval set X "  :F $CONFIG_FILES  :H $CONFIG_HEADERS    :C $CONFIG_COMMANDS"
shift
for ac_tag
do
  case $ac_tag in
  :[FHLC]) ac_mode=$ac_tag; continue;;
  esac
  case $ac_mode$ac_tag in
  :[FHL]*:*);;
  :L* | :C*:*) as_fn_error $? "invalid tag \`$ac_tag'" "$LINENO" 5;;
  :[FH]-) ac_tag=-:-;;
  :[FH]*) ac_tag=$ac_tag:$ac_tag.in;;
  esac
  ac_save_IFS=$IFS
  IFS=:
  set x $ac_tag
  IFS=$ac_save_IFS
  shift
  ac_file=$1
  shift

  case $ac_mode in
  :L) ac_source=$1;;
  :[FH])
    ac_file_inputs=
    for ac_f
    do
      case $ac_f in
      -) ac_f="$ac_tmp/stdin";;
      *) # Look for the file first in the build tree, then in the source tree
	 # (if the path is not absolute).  The absolute path cannot be DOS-style,
	 # because $ac_f cannot contain `:'.
	 test -f "$ac_f" ||
	   case $ac_f in
	   [\\/$]*) false;;
	   *) test -f "$srcdir/$ac_f" && ac_f="$srcdir/$ac_f";;
	   esac ||
	   as_fn_error 1 "cannot find input file: \`$ac_f'" "$LINENO" 5;;
      esac
      case $ac_f in *\'*) ac_f=`$as_echo "$ac_f" | sed "s/'/'\\\\\\\\''/g"`;; esac
      as_fn_append ac_file_inputs " '$ac_f'"
    done

    # Let's still pretend it is `configure' which instantiates (i.e., don't
    # use $as_me), people would be surprised to read:
    #    /* config.h.  Generated by config.status.  */
    configure_input='Generated from '`
	  $as_echo "$*" | sed 's|^[^:]*/||;s|:[^:]*/|, |g'
	`' by configure.'
    if test x"$ac_file" != x-; then
      configure_input="$ac_file.  $configure_input"
      { $as_echo "$as_me:${as_lineno-$LINENO}: creating $ac_file" >&5
$as_echo "$as_me: creating $ac_file" >&6;}
    fi
    # Neutralize special characters interpreted by sed in replacement strings.
    case $configure_input in #(
    *\&* | *\|* | *\\* )
       ac_sed_conf_input=`$as_echo "$configure_input" |
       sed 's/[\\\\&|]/\\\\&/g'`;; #(
    *) ac_sed_conf_input=$configure_input;;
    esac

    case $ac_tag in
    *:-:* | *:-) cat >"$ac_tmp/stdin" \
      || as_fn_error $? "could not create $ac_file" "$LINENO" 5 ;;
    esac
    ;;
  esac

  ac_dir=`$as_dirname -- "$ac_file" ||
$as_expr X"$ac_file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$ac_file" : 'X\(//\)[^/]' \| \
	 X"$ac_file" : 'X\(//\)$' \| \
	 X"$ac_file" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$ac_file" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
  as_dir="$ac_dir"; as_fn_mkdir_p
  ac_builddir=.

case "$ac_dir" in
.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;
*)
  ac_dir_suffix=/`$as_echo "$ac_dir" | sed 's|^\.[\\/]||'`
  # A ".." for each directory in $ac_dir_suffix.
  ac_top_builddir_sub=`$as_echo "$ac_dir_suffix" | sed 's|/[^\\/]*|/..|g;s|/||'`
  case $ac_top_builddir_sub in
  "") ac_top_builddir_sub=. ac_top_build_prefix= ;;
  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;
  esac ;;
esac
ac_abs_top_builddir=$ac_pwd
ac_abs_builddir=$ac_pwd$ac_dir_suffix
# for backward compatibility:
ac_top_builddir=$ac_top_build_prefix

case $srcdir in
  .)  # We are building in place.
    ac_srcdir=.
    ac_top_srcdir=$ac_top_builddir_sub
    ac_abs_top_srcdir=$ac_pwd ;;
  [\\/]* | ?:[\\/]* )  # Absolute name.
    ac_srcdir=$srcdir$ac_dir_suffix;
    ac_top_srcdir=$srcdir
    ac_abs_top_srcdir=$srcdir ;;
  *) # Relative name.
    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix
    ac_top_srcdir=$ac_top_build_prefix$srcdir
    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;
esac
ac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix


  case $ac_mode in
  :F)
  #
  # CONFIG_FILE
  #

  case $INSTALL in
  [\\/$]* | ?:[\\/]* ) ac_INSTALL=$INSTALL ;;
  *) ac_INSTALL=$ac_top_build_prefix$INSTALL ;;
  esac
  ac_MKDIR_P=$MKDIR_P
  case $MKDIR_P in
  [\\/$]* | ?:[\\/]* ) ;;
  */*) ac_MKDIR_P=$ac_top_build_prefix$MKDIR_P ;;
  esac
# If the template does not know about datarootdir, expand it.
# FIXME: This hack should be removed a few years after 2.60.
ac_datarootdir_hack=; ac_datarootdir_seen=
ac_sed_dataroot='
/datarootdir/ {
  p
  q
}
/@datadir@/p
/@docdir@/p
/@infodir@/p
/@localedir@/p
/@mandir@/p'
case `eval "sed -n \"\$ac_sed_dataroot\" $ac_file_inputs"` in
*datarootdir*) ac_datarootdir_seen=yes;;
*@datadir@*|*@docdir@*|*@infodir@*|*@localedir@*|*@mandir@*)
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&5
$as_echo "$as_me: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting" >&2;}
  ac_datarootdir_hack='
  s&@datadir@&${datarootdir}&g
  s&@docdir@&${datarootdir}/doc/${PACKAGE}&g
  s&@infodir@&${datarootdir}/info&g
  s&@localedir@&${datarootdir}/locale&g
  s&@mandir@&${datarootdir}/man&g
  s&\${datarootdir}&${prefix}/share&g' ;;
esac
ac_sed_extra="/^[	 ]*VPATH[	 ]*=[	 ]*/{
h
s///
s/^/:/
s/[	 ]*$/:/
s/:\$(srcdir):/:/g
s/:\${srcdir}:/:/g
s/:@srcdir@:/:/g
s/^:*//
s/:*$//
x
s/\(=[	 ]*\).*/\1/
G
s/\n//
s/^[^=]*=[	 ]*$//
}

:t
/@[a-zA-Z_][a-zA-Z_0-9]*@/!b
s|@configure_input@|$ac_sed_conf_input|;t t
s&@top_builddir@&$ac_top_builddir_sub&;t t
s&@top_build_prefix@&$ac_top_build_prefix&;t t
s&@srcdir@&$ac_srcdir&;t t
s&@abs_srcdir@&$ac_abs_srcdir&;t t
s&@top_srcdir@&$ac_top_srcdir&;t t
s&@abs_top_srcdir@&$ac_abs_top_srcdir&;t t
s&@builddir@&$ac_builddir&;t t
s&@abs_builddir@&$ac_abs_builddir&;t t
s&@abs_top_builddir@&$ac_abs_top_builddir&;t t
s&@INSTALL@&$ac_INSTALL&;t t
s&@MKDIR_P@&$ac_MKDIR_P&;t t
$ac_datarootdir_hack
"
eval sed \"\$ac_sed_extra\" "$ac_file_inputs" | $AWK -f "$ac_tmp/subs.awk" \
  >$ac_tmp/out || as_fn_error $? "could not create $ac_file" "$LINENO" 5

test -z "$ac_datarootdir_hack$ac_datarootdir_seen" &&
  { ac_out=`sed -n '/\${datarootdir}/p' "$ac_tmp/out"`; test -n "$ac_out"; } &&
  { ac_out=`sed -n '/^[	 ]*datarootdir[	 ]*:*=/p' \
      "$ac_tmp/out"`; test -z "$ac_out"; } &&
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined" >&5
$as_echo "$as_me: WARNING: $ac_file contains a reference to the variable \`datarootdir'
which seems to be undefined.  Please make sure it is defined" >&2;}

  rm -f "$ac_tmp/stdin"
  case $ac_file in
  -) cat "$ac_tmp/out" && rm -f "$ac_tmp/out";;
  *) rm -f "$ac_file" && mv "$ac_tmp/out" "$ac_file";;
  esac \
  || as_fn_error $? "could not create $ac_file" "$LINENO" 5
 ;;
  :H)
  #
  # CONFIG_HEADER
  #
  if test x"$ac_file" != x-; then
    {
      $as_echo "/* $configure_input  */" \
      && eval '$AWK -f "$ac_tmp/defines.awk"' "$ac_file_inputs"
    } >"$ac_tmp/config.h" \
      || as_fn_error $? "could not create $ac_file" "$LINENO" 5
    if diff "$ac_file" "$ac_tmp/config.h" >/dev/null 2>&1; then
      { $as_echo "$as_me:${as_lineno-$LINENO}: $ac_file is unchanged" >&5
$as_echo "$as_me: $ac_file is unchanged" >&6;}
    else
      rm -f "$ac_file"
      mv "$ac_tmp/config.h" "$ac_file" \
	|| as_fn_error $? "could not create $ac_file" "$LINENO" 5
    fi
  else
    $as_echo "/* $configure_input  */" \
      && eval '$AWK -f "$ac_tmp/defines.awk"' "$ac_file_inputs" \
      || as_fn_error $? "could not create -" "$LINENO" 5
  fi
# Compute "$ac_file"'s index in $config_headers.
_am_arg="$ac_file"
_am_stamp_count=1
for _am_header in $config_headers :; do
  case $_am_header in
    $_am_arg | $_am_arg:* )
      break ;;
    * )
      _am_stamp_count=`expr $_am_stamp_count + 1` ;;
  esac
done
echo "timestamp for $_am_arg" >`$as_dirname -- "$_am_arg" ||
$as_expr X"$_am_arg" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$_am_arg" : 'X\(//\)[^/]' \| \
	 X"$_am_arg" : 'X\(//\)$' \| \
	 X"$_am_arg" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$_am_arg" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`/stamp-h$_am_stamp_count
 ;;

  :C)  { $as_echo "$as_me:${as_lineno-$LINENO}: executing $ac_file commands" >&5
$as_echo "$as_me: executing $ac_file commands" >&6;}
 ;;
  esac


  case $ac_file$ac_mode in
    "depfiles":C) test x"$AMDEP_TRUE" != x"" || {
  # Older Autoconf quotes --file arguments for eval, but not when files
  # are listed without --file.  Let's play safe and only enable the eval
  # if we detect the quoting.
  case $CONFIG_FILES in
  *\'*) eval set x "$CONFIG_FILES" ;;
  *)   set x $CONFIG_FILES ;;
  esac
  shift
  for mf
  do
    # Strip MF so we end up with the name of the file.
    mf=`echo "$mf" | sed -e 's/:.*$//'`
    # Check whether this is an Automake generated Makefile or not.
    # We used to match only the files named 'Makefile.in', but
    # some people rename them; so instead we look at the file content.
    # Grep'ing the first line is not enough: some people post-process
    # each Makefile.in and add a new line on top of each file to say so.
    # Grep'ing the whole file is not good either: AIX grep has a line
    # limit of 2048, but all sed's we know have understand at least 4000.
    if sed -n 's,^#.*generated by automake.*,X,p' "$mf" | grep X >/dev/null 2>&1; then
      dirpart=`$as_dirname -- "$mf" ||
$as_expr X"$mf" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$mf" : 'X\(//\)[^/]' \| \
	 X"$mf" : 'X\(//\)$' \| \
	 X"$mf" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$mf" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
    else
      continue
    fi
    # Extract the definition of DEPDIR, am__include, and am__quote
    # from the Makefile without running 'make'.
    DEPDIR=`sed -n 's/^DEPDIR = //p' < "$mf"`
    test -z "$DEPDIR" && continue
    am__include=`sed -n 's/^am__include = //p' < "$mf"`
    test -z "$am__include" && continue
    am__quote=`sed -n 's/^am__quote = //p' < "$mf"`
    # Find all dependency output files, they are included files with
    # $(DEPDIR) in their names.  We invoke sed twice because it is the
    # simplest approach to changing $(DEPDIR) to its actual value in the
    # expansion.
    for file in `sed -n "
      s/^$am__include $am__quote\(.*(DEPDIR).*\)$am__quote"'$/\1/p' <"$mf" | \
	 sed -e 's/\$(DEPDIR)/'"$DEPDIR"'/g'`; do
      # Make sure the directory exists.
      test -f "$dirpart/$file" && continue
      fdir=`$as_dirname -- "$file" ||
$as_expr X"$file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$file" : 'X\(//\)[^/]' \| \
	 X"$file" : 'X\(//\)$' \| \
	 X"$file" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$file" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      as_dir=$dirpart/$fdir; as_fn_mkdir_p
      # echo "creating $dirpart/$file"
      echo '# dummy' > "$dirpart/$file"
    done
  done
}
 ;;
    "libtool":C)

    # See if we are running on zsh, and set the options which allow our
    # commands through without removal of \ escapes.
    if test -n "${ZSH_VERSION+set}" ; then
      setopt NO_GLOB_SUBST
    fi

    cfgfile="${ofile}T"
    trap "$RM \"$cfgfile\"; exit 1" 1 2 15
    $RM "$cfgfile"

    cat <<_LT_EOF >> "$cfgfile"
#! $SHELL

# `$ECHO "$ofile" | sed 's%^.*/%%'` - Provide generalized library-building support services.
# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION
# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:
# NOTE: Changes made to this file will be lost: look at ltmain.sh.
#
#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,
#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software
#                 Foundation, Inc.
#   Written by Gordon Matzigkeit, 1996
#
#   This file is part of GNU Libtool.
#
# GNU Libtool is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.
#
# As a special exception to the GNU General Public License,
# if you distribute this file as part of a program or library that
# is built using GNU Libtool, you may include this file under the
# same distribution terms that you use for the rest of that program.
#
# GNU Libtool is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Libtool; see the file COPYING.  If not, a copy
# can be downloaded from http://www.gnu.org/licenses/gpl.html, or
# obtained by writing to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.


# The names of the tagged configurations supported by this script.
available_tags="RC "

# ### BEGIN LIBTOOL CONFIG

# Which release of libtool.m4 was used?
macro_version=$macro_version
macro_revision=$macro_revision

# Assembler program.
AS=$lt_AS

# DLL creation program.
DLLTOOL=$lt_DLLTOOL

# Object dumper program.
OBJDUMP=$lt_OBJDUMP

# Whether or not to build shared libraries.
build_libtool_libs=$enable_shared

# Whether or not to build static libraries.
build_old_libs=$enable_static

# What type of objects to build.
pic_mode=$pic_mode

# Whether or not to optimize for fast installation.
fast_install=$enable_fast_install

# Shell to use when invoking shell scripts.
SHELL=$lt_SHELL

# An echo program that protects backslashes.
ECHO=$lt_ECHO

# The PATH separator for the build system.
PATH_SEPARATOR=$lt_PATH_SEPARATOR

# The host system.
host_alias=$host_alias
host=$host
host_os=$host_os

# The build system.
build_alias=$build_alias
build=$build
build_os=$build_os

# A sed program that does not truncate output.
SED=$lt_SED

# Sed that helps us avoid accidentally triggering echo(1) options like -n.
Xsed="\$SED -e 1s/^X//"

# A grep program that handles long lines.
GREP=$lt_GREP

# An ERE matcher.
EGREP=$lt_EGREP

# A literal string matcher.
FGREP=$lt_FGREP

# A BSD- or MS-compatible name lister.
NM=$lt_NM

# Whether we need soft or hard links.
LN_S=$lt_LN_S

# What is the maximum length of a command?
max_cmd_len=$max_cmd_len

# Object file suffix (normally "o").
objext=$ac_objext

# Executable file suffix (normally "").
exeext=$exeext

# whether the shell understands "unset".
lt_unset=$lt_unset

# turn spaces into newlines.
SP2NL=$lt_lt_SP2NL

# turn newlines into spaces.
NL2SP=$lt_lt_NL2SP

# convert \$build file names to \$host format.
to_host_file_cmd=$lt_cv_to_host_file_cmd

# convert \$build files to toolchain format.
to_tool_file_cmd=$lt_cv_to_tool_file_cmd

# Method to check whether dependent libraries are shared objects.
deplibs_check_method=$lt_deplibs_check_method

# Command to use when deplibs_check_method = "file_magic".
file_magic_cmd=$lt_file_magic_cmd

# How to find potential files when deplibs_check_method = "file_magic".
file_magic_glob=$lt_file_magic_glob

# Find potential files using nocaseglob when deplibs_check_method = "file_magic".
want_nocaseglob=$lt_want_nocaseglob

# Command to associate shared and link libraries.
sharedlib_from_linklib_cmd=$lt_sharedlib_from_linklib_cmd

# The archiver.
AR=$lt_AR

# Flags to create an archive.
AR_FLAGS=$lt_AR_FLAGS

# How to feed a file listing to the archiver.
archiver_list_spec=$lt_archiver_list_spec

# A symbol stripping program.
STRIP=$lt_STRIP

# Commands used to install an old-style archive.
RANLIB=$lt_RANLIB
old_postinstall_cmds=$lt_old_postinstall_cmds
old_postuninstall_cmds=$lt_old_postuninstall_cmds

# Whether to use a lock for old archive extraction.
lock_old_archive_extraction=$lock_old_archive_extraction

# A C compiler.
LTCC=$lt_CC

# LTCC compiler flags.
LTCFLAGS=$lt_CFLAGS

# Take the output of nm and produce a listing of raw symbols and C names.
global_symbol_pipe=$lt_lt_cv_sys_global_symbol_pipe

# Transform the output of nm in a proper C declaration.
global_symbol_to_cdecl=$lt_lt_cv_sys_global_symbol_to_cdecl

# Transform the output of nm in a C name address pair.
global_symbol_to_c_name_address=$lt_lt_cv_sys_global_symbol_to_c_name_address

# Transform the output of nm in a C name address pair when lib prefix is needed.
global_symbol_to_c_name_address_lib_prefix=$lt_lt_cv_sys_global_symbol_to_c_name_address_lib_prefix

# Specify filename containing input files for \$NM.
nm_file_list_spec=$lt_nm_file_list_spec

# The root where to search for dependent libraries,and in which our libraries should be installed.
lt_sysroot=$lt_sysroot

# The name of the directory that contains temporary libtool files.
objdir=$objdir

# Used to examine libraries when file_magic_cmd begins with "file".
MAGIC_CMD=$MAGIC_CMD

# Must we lock files when doing compilation?
need_locks=$lt_need_locks

# Manifest tool.
MANIFEST_TOOL=$lt_MANIFEST_TOOL

# Tool to manipulate archived DWARF debug symbol files on Mac OS X.
DSYMUTIL=$lt_DSYMUTIL

# Tool to change global to local symbols on Mac OS X.
NMEDIT=$lt_NMEDIT

# Tool to manipulate fat objects and archives on Mac OS X.
LIPO=$lt_LIPO

# ldd/readelf like tool for Mach-O binaries on Mac OS X.
OTOOL=$lt_OTOOL

# ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4.
OTOOL64=$lt_OTOOL64

# Old archive suffix (normally "a").
libext=$libext

# Shared library suffix (normally ".so").
shrext_cmds=$lt_shrext_cmds

# The commands to extract the exported symbol list from a shared archive.
extract_expsyms_cmds=$lt_extract_expsyms_cmds

# Variables whose values should be saved in libtool wrapper scripts and
# restored at link time.
variables_saved_for_relink=$lt_variables_saved_for_relink

# Do we need the "lib" prefix for modules?
need_lib_prefix=$need_lib_prefix

# Do we need a version for libraries?
need_version=$need_version

# Library versioning type.
version_type=$version_type

# Shared library runtime path variable.
runpath_var=$runpath_var

# Shared library path variable.
shlibpath_var=$shlibpath_var

# Is shlibpath searched before the hard-coded library search path?
shlibpath_overrides_runpath=$shlibpath_overrides_runpath

# Format of library name prefix.
libname_spec=$lt_libname_spec

# List of archive names.  First name is the real one, the rest are links.
# The last name is the one that the linker finds with -lNAME
library_names_spec=$lt_library_names_spec

# The coded name of the library, if different from the real name.
soname_spec=$lt_soname_spec

# Permission mode override for installation of shared libraries.
install_override_mode=$lt_install_override_mode

# Command to use after installation of a shared archive.
postinstall_cmds=$lt_postinstall_cmds

# Command to use after uninstallation of a shared archive.
postuninstall_cmds=$lt_postuninstall_cmds

# Commands used to finish a libtool library installation in a directory.
finish_cmds=$lt_finish_cmds

# As "finish_cmds", except a single script fragment to be evaled but
# not shown.
finish_eval=$lt_finish_eval

# Whether we should hardcode library paths into libraries.
hardcode_into_libs=$hardcode_into_libs

# Compile-time system search path for libraries.
sys_lib_search_path_spec=$lt_sys_lib_search_path_spec

# Run-time system search path for libraries.
sys_lib_dlsearch_path_spec=$lt_sys_lib_dlsearch_path_spec

# Whether dlopen is supported.
dlopen_support=$enable_dlopen

# Whether dlopen of programs is supported.
dlopen_self=$enable_dlopen_self

# Whether dlopen of statically linked programs is supported.
dlopen_self_static=$enable_dlopen_self_static

# Commands to strip libraries.
old_striplib=$lt_old_striplib
striplib=$lt_striplib


# The linker used to build libraries.
LD=$lt_LD

# How to create reloadable object files.
reload_flag=$lt_reload_flag
reload_cmds=$lt_reload_cmds

# Commands used to build an old-style archive.
old_archive_cmds=$lt_old_archive_cmds

# A language specific compiler.
CC=$lt_compiler

# Is the compiler the GNU compiler?
with_gcc=$GCC

# Compiler flag to turn off builtin functions.
no_builtin_flag=$lt_lt_prog_compiler_no_builtin_flag

# Additional compiler flags for building library objects.
pic_flag=$lt_lt_prog_compiler_pic

# How to pass a linker flag through the compiler.
wl=$lt_lt_prog_compiler_wl

# Compiler flag to prevent dynamic linking.
link_static_flag=$lt_lt_prog_compiler_static

# Does compiler simultaneously support -c and -o options?
compiler_c_o=$lt_lt_cv_prog_compiler_c_o

# Whether or not to add -lc for building shared libraries.
build_libtool_need_lc=$archive_cmds_need_lc

# Whether or not to disallow shared libs when runtime libs are static.
allow_libtool_libs_with_static_runtimes=$enable_shared_with_static_runtimes

# Compiler flag to allow reflexive dlopens.
export_dynamic_flag_spec=$lt_export_dynamic_flag_spec

# Compiler flag to generate shared objects directly from archives.
whole_archive_flag_spec=$lt_whole_archive_flag_spec

# Whether the compiler copes with passing no objects directly.
compiler_needs_object=$lt_compiler_needs_object

# Create an old-style archive from a shared archive.
old_archive_from_new_cmds=$lt_old_archive_from_new_cmds

# Create a temporary old-style archive to link instead of a shared archive.
old_archive_from_expsyms_cmds=$lt_old_archive_from_expsyms_cmds

# Commands used to build a shared archive.
archive_cmds=$lt_archive_cmds
archive_expsym_cmds=$lt_archive_expsym_cmds

# Commands used to build a loadable module if different from building
# a shared archive.
module_cmds=$lt_module_cmds
module_expsym_cmds=$lt_module_expsym_cmds

# Whether we are building with GNU ld or not.
with_gnu_ld=$lt_with_gnu_ld

# Flag that allows shared libraries with undefined symbols to be built.
allow_undefined_flag=$lt_allow_undefined_flag

# Flag that enforces no undefined symbols.
no_undefined_flag=$lt_no_undefined_flag

# Flag to hardcode \$libdir into a binary during linking.
# This must work even if \$libdir does not exist
hardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec

# Whether we need a single "-rpath" flag with a separated argument.
hardcode_libdir_separator=$lt_hardcode_libdir_separator

# Set to "yes" if using DIR/libNAME\${shared_ext} during linking hardcodes
# DIR into the resulting binary.
hardcode_direct=$hardcode_direct

# Set to "yes" if using DIR/libNAME\${shared_ext} during linking hardcodes
# DIR into the resulting binary and the resulting library dependency is
# "absolute",i.e impossible to change by setting \${shlibpath_var} if the
# library is relocated.
hardcode_direct_absolute=$hardcode_direct_absolute

# Set to "yes" if using the -LDIR flag during linking hardcodes DIR
# into the resulting binary.
hardcode_minus_L=$hardcode_minus_L

# Set to "yes" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR
# into the resulting binary.
hardcode_shlibpath_var=$hardcode_shlibpath_var

# Set to "yes" if building a shared library automatically hardcodes DIR
# into the library and all subsequent libraries and executables linked
# against it.
hardcode_automatic=$hardcode_automatic

# Set to yes if linker adds runtime paths of dependent libraries
# to runtime path list.
inherit_rpath=$inherit_rpath

# Whether libtool must link a program against all its dependency libraries.
link_all_deplibs=$link_all_deplibs

# Set to "yes" if exported symbols are required.
always_export_symbols=$always_export_symbols

# The commands to list exported symbols.
export_symbols_cmds=$lt_export_symbols_cmds

# Symbols that should not be listed in the preloaded symbols.
exclude_expsyms=$lt_exclude_expsyms

# Symbols that must always be exported.
include_expsyms=$lt_include_expsyms

# Commands necessary for linking programs (against libraries) with templates.
prelink_cmds=$lt_prelink_cmds

# Commands necessary for finishing linking programs.
postlink_cmds=$lt_postlink_cmds

# Specify filename containing input files.
file_list_spec=$lt_file_list_spec

# How to hardcode a shared library path into an executable.
hardcode_action=$hardcode_action

# ### END LIBTOOL CONFIG

_LT_EOF

  case $host_os in
  aix3*)
    cat <<\_LT_EOF >> "$cfgfile"
# AIX sometimes has problems with the GCC collect2 program.  For some
# reason, if we set the COLLECT_NAMES environment variable, the problems
# vanish in a puff of smoke.
if test "X${COLLECT_NAMES+set}" != Xset; then
  COLLECT_NAMES=
  export COLLECT_NAMES
fi
_LT_EOF
    ;;
  esac


ltmain="$ac_aux_dir/ltmain.sh"


  # We use sed instead of cat because bash on DJGPP gets confused if
  # if finds mixed CR/LF and LF-only lines.  Since sed operates in
  # text mode, it properly converts lines to CR/LF.  This bash problem
  # is reportedly fixed, but why not run on old versions too?
  sed '$q' "$ltmain" >> "$cfgfile" \
     || (rm -f "$cfgfile"; exit 1)

  if test x"$xsi_shell" = xyes; then
  sed -e '/^func_dirname ()$/,/^} # func_dirname /c\
func_dirname ()\
{\
\    case ${1} in\
\      */*) func_dirname_result="${1%/*}${2}" ;;\
\      *  ) func_dirname_result="${3}" ;;\
\    esac\
} # Extended-shell func_dirname implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_basename ()$/,/^} # func_basename /c\
func_basename ()\
{\
\    func_basename_result="${1##*/}"\
} # Extended-shell func_basename implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_dirname_and_basename ()$/,/^} # func_dirname_and_basename /c\
func_dirname_and_basename ()\
{\
\    case ${1} in\
\      */*) func_dirname_result="${1%/*}${2}" ;;\
\      *  ) func_dirname_result="${3}" ;;\
\    esac\
\    func_basename_result="${1##*/}"\
} # Extended-shell func_dirname_and_basename implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_stripname ()$/,/^} # func_stripname /c\
func_stripname ()\
{\
\    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\
\    # positional parameters, so assign one to ordinary parameter first.\
\    func_stripname_result=${3}\
\    func_stripname_result=${func_stripname_result#"${1}"}\
\    func_stripname_result=${func_stripname_result%"${2}"}\
} # Extended-shell func_stripname implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_split_long_opt ()$/,/^} # func_split_long_opt /c\
func_split_long_opt ()\
{\
\    func_split_long_opt_name=${1%%=*}\
\    func_split_long_opt_arg=${1#*=}\
} # Extended-shell func_split_long_opt implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_split_short_opt ()$/,/^} # func_split_short_opt /c\
func_split_short_opt ()\
{\
\    func_split_short_opt_arg=${1#??}\
\    func_split_short_opt_name=${1%"$func_split_short_opt_arg"}\
} # Extended-shell func_split_short_opt implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_lo2o ()$/,/^} # func_lo2o /c\
func_lo2o ()\
{\
\    case ${1} in\
\      *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\
\      *)    func_lo2o_result=${1} ;;\
\    esac\
} # Extended-shell func_lo2o implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_xform ()$/,/^} # func_xform /c\
func_xform ()\
{\
    func_xform_result=${1%.*}.lo\
} # Extended-shell func_xform implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_arith ()$/,/^} # func_arith /c\
func_arith ()\
{\
    func_arith_result=$(( $* ))\
} # Extended-shell func_arith implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_len ()$/,/^} # func_len /c\
func_len ()\
{\
    func_len_result=${#1}\
} # Extended-shell func_len implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:

fi

if test x"$lt_shell_append" = xyes; then
  sed -e '/^func_append ()$/,/^} # func_append /c\
func_append ()\
{\
    eval "${1}+=\\${2}"\
} # Extended-shell func_append implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  sed -e '/^func_append_quoted ()$/,/^} # func_append_quoted /c\
func_append_quoted ()\
{\
\    func_quote_for_eval "${2}"\
\    eval "${1}+=\\\\ \\$func_quote_for_eval_result"\
} # Extended-shell func_append_quoted implementation' "$cfgfile" > $cfgfile.tmp \
  && mv -f "$cfgfile.tmp" "$cfgfile" \
    || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
test 0 -eq $? || _lt_function_replace_fail=:


  # Save a `func_append' function call where possible by direct use of '+='
  sed -e 's%func_append \([a-zA-Z_]\{1,\}\) "%\1+="%g' $cfgfile > $cfgfile.tmp \
    && mv -f "$cfgfile.tmp" "$cfgfile" \
      || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
  test 0 -eq $? || _lt_function_replace_fail=:
else
  # Save a `func_append' function call even when '+=' is not available
  sed -e 's%func_append \([a-zA-Z_]\{1,\}\) "%\1="$\1%g' $cfgfile > $cfgfile.tmp \
    && mv -f "$cfgfile.tmp" "$cfgfile" \
      || (rm -f "$cfgfile" && cp "$cfgfile.tmp" "$cfgfile" && rm -f "$cfgfile.tmp")
  test 0 -eq $? || _lt_function_replace_fail=:
fi

if test x"$_lt_function_replace_fail" = x":"; then
  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: Unable to substitute extended shell functions in $ofile" >&5
$as_echo "$as_me: WARNING: Unable to substitute extended shell functions in $ofile" >&2;}
fi


   mv -f "$cfgfile" "$ofile" ||
    (rm -f "$ofile" && cp "$cfgfile" "$ofile" && rm -f "$cfgfile")
  chmod +x "$ofile"


    cat <<_LT_EOF >> "$ofile"

# ### BEGIN LIBTOOL TAG CONFIG: RC

# The linker used to build libraries.
LD=$lt_LD_RC

# How to create reloadable object files.
reload_flag=$lt_reload_flag_RC
reload_cmds=$lt_reload_cmds_RC

# Commands used to build an old-style archive.
old_archive_cmds=$lt_old_archive_cmds_RC

# A language specific compiler.
CC=$lt_compiler_RC

# Is the compiler the GNU compiler?
with_gcc=$GCC_RC

# Compiler flag to turn off builtin functions.
no_builtin_flag=$lt_lt_prog_compiler_no_builtin_flag_RC

# Additional compiler flags for building library objects.
pic_flag=$lt_lt_prog_compiler_pic_RC

# How to pass a linker flag through the compiler.
wl=$lt_lt_prog_compiler_wl_RC

# Compiler flag to prevent dynamic linking.
link_static_flag=$lt_lt_prog_compiler_static_RC

# Does compiler simultaneously support -c and -o options?
compiler_c_o=$lt_lt_cv_prog_compiler_c_o_RC

# Whether or not to add -lc for building shared libraries.
build_libtool_need_lc=$archive_cmds_need_lc_RC

# Whether or not to disallow shared libs when runtime libs are static.
allow_libtool_libs_with_static_runtimes=$enable_shared_with_static_runtimes_RC

# Compiler flag to allow reflexive dlopens.
export_dynamic_flag_spec=$lt_export_dynamic_flag_spec_RC

# Compiler flag to generate shared objects directly from archives.
whole_archive_flag_spec=$lt_whole_archive_flag_spec_RC

# Whether the compiler copes with passing no objects directly.
compiler_needs_object=$lt_compiler_needs_object_RC

# Create an old-style archive from a shared archive.
old_archive_from_new_cmds=$lt_old_archive_from_new_cmds_RC

# Create a temporary old-style archive to link instead of a shared archive.
old_archive_from_expsyms_cmds=$lt_old_archive_from_expsyms_cmds_RC

# Commands used to build a shared archive.
archive_cmds=$lt_archive_cmds_RC
archive_expsym_cmds=$lt_archive_expsym_cmds_RC

# Commands used to build a loadable module if different from building
# a shared archive.
module_cmds=$lt_module_cmds_RC
module_expsym_cmds=$lt_module_expsym_cmds_RC

# Whether we are building with GNU ld or not.
with_gnu_ld=$lt_with_gnu_ld_RC

# Flag that allows shared libraries with undefined symbols to be built.
allow_undefined_flag=$lt_allow_undefined_flag_RC

# Flag that enforces no undefined symbols.
no_undefined_flag=$lt_no_undefined_flag_RC

# Flag to hardcode \$libdir into a binary during linking.
# This must work even if \$libdir does not exist
hardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec_RC

# Whether we need a single "-rpath" flag with a separated argument.
hardcode_libdir_separator=$lt_hardcode_libdir_separator_RC

# Set to "yes" if using DIR/libNAME\${shared_ext} during linking hardcodes
# DIR into the resulting binary.
hardcode_direct=$hardcode_direct_RC

# Set to "yes" if using DIR/libNAME\${shared_ext} during linking hardcodes
# DIR into the resulting binary and the resulting library dependency is
# "absolute",i.e impossible to change by setting \${shlibpath_var} if the
# library is relocated.
hardcode_direct_absolute=$hardcode_direct_absolute_RC

# Set to "yes" if using the -LDIR flag during linking hardcodes DIR
# into the resulting binary.
hardcode_minus_L=$hardcode_minus_L_RC

# Set to "yes" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR
# into the resulting binary.
hardcode_shlibpath_var=$hardcode_shlibpath_var_RC

# Set to "yes" if building a shared library automatically hardcodes DIR
# into the library and all subsequent libraries and executables linked
# against it.
hardcode_automatic=$hardcode_automatic_RC

# Set to yes if linker adds runtime paths of dependent libraries
# to runtime path list.
inherit_rpath=$inherit_rpath_RC

# Whether libtool must link a program against all its dependency libraries.
link_all_deplibs=$link_all_deplibs_RC

# Set to "yes" if exported symbols are required.
always_export_symbols=$always_export_symbols_RC

# The commands to list exported symbols.
export_symbols_cmds=$lt_export_symbols_cmds_RC

# Symbols that should not be listed in the preloaded symbols.
exclude_expsyms=$lt_exclude_expsyms_RC

# Symbols that must always be exported.
include_expsyms=$lt_include_expsyms_RC

# Commands necessary for linking programs (against libraries) with templates.
prelink_cmds=$lt_prelink_cmds_RC

# Commands necessary for finishing linking programs.
postlink_cmds=$lt_postlink_cmds_RC

# Specify filename containing input files.
file_list_spec=$lt_file_list_spec_RC

# How to hardcode a shared library path into an executable.
hardcode_action=$hardcode_action_RC

# ### END LIBTOOL TAG CONFIG: RC
_LT_EOF

 ;;

  esac
done # for ac_tag


as_fn_exit 0
